<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Morsol</title>
  
  
  <link href="/moersuo.github.io/atom.xml" rel="self"/>
  
  <link href="http://moersuo.github.io/"/>
  <updated>2021-05-15T00:18:48.848Z</updated>
  <id>http://moersuo.github.io/</id>
  
  <author>
    <name>morsol</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode题解104：二叉树的最大深度</title>
    <link href="http://moersuo.github.io/2021/05/15/LeetCode%E9%A2%98%E8%A7%A3104%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <id>http://moersuo.github.io/2021/05/15/LeetCode%E9%A2%98%E8%A7%A3104%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</id>
    <published>2021-05-14T23:32:46.000Z</published>
    <updated>2021-05-15T00:18:48.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote><p>给定二叉树 [3,9,20,null,null,15,7]，</p><pre><code> 3/ \9  20  /  \ 15   7</code></pre><p>   返回它的最大深度 3 。</p></blockquote><h2 id="递归解决："><a href="#递归解决：" class="headerlink" title="递归解决："></a>递归解决：</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ul><li>首先我们要找出递归的终止条件，因为是二叉树，所以当根节点为null时，也就不计算入最大深度，即可返回0</li><li>其次要找出等价关系<ul><li>众所周知，二叉树分为左子树与右子树，我们所要取得最大深度便是在某一较长的子树上。因此，我们可以不断递归求出每一层中拥有较长子树的那一个节点，再将其作为根节点继续遍历。</li><li>每次遍历我们都进入了一层，因此每次都在递归等式上+1，直到null为止。</li></ul></li></ul><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftHeight = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightHeight = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftHeight,rightHeight) +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度：O-n"><a href="#时间复杂度：O-n" class="headerlink" title="时间复杂度：O(n)"></a>时间复杂度：O(n)</h3><h3 id="空间复杂度：O-height"><a href="#空间复杂度：O-height" class="headerlink" title="空间复杂度：O(height)"></a>空间复杂度：O(height)</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉树的最大深度&quot;&gt;&lt;a href=&quot;#二叉树的最大深度&quot; class=&quot;headerlink&quot; title=&quot;二叉树的最大深度&quot;&gt;&lt;/a&gt;二叉树的最大深度&lt;/h1&gt;&lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode题解" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Leetc题解" scheme="http://moersuo.github.io/tags/Leetc%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer07：重建二叉树</title>
    <link href="http://moersuo.github.io/2020/10/30/%E5%89%91%E6%8C%87offer07%EF%BC%9A%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://moersuo.github.io/2020/10/30/%E5%89%91%E6%8C%87offer07%EF%BC%9A%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-10-30T02:24:39.000Z</published>
    <updated>2020-10-30T04:24:28.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给出</span><br><span class="line">前序遍历 preorder &#x3D; [3,9,20,15,7]</span><br><span class="line">中序遍历 inorder &#x3D; [9,3,15,20,7]</span><br><span class="line">返回如下的二叉树：</span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">限制：0 &lt;&#x3D; 节点个数 &lt;&#x3D; 5000</span><br></pre></td></tr></table></figure></blockquote><h1 id="官方法一：递归"><a href="#官方法一：递归" class="headerlink" title="官方法一：递归"></a>官方法一：递归</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ul><li>前序遍历性质：根节点–&gt;左子树–&gt;右子树</li><li>中序遍历性质：左子树–&gt;根节点–&gt;右子树</li><li>由此可推出：<ul><li>前序遍历的首元素为树的根节点<strong>node</strong>的值</li><li>在中序遍历中搜索根节点<strong>node</strong>的索引，可将中序遍历划分为，左子树–&gt;根节点–&gt;右子树</li><li>根据中序遍历中的左右子树的节点的数量，可将前序遍历划分为，根节点–&gt;左子树–&gt;右子树</li><li>通过以上三步，可确定三个节点<strong>1.树的根节点 2. 左子树的根节点 3 .右子树根节点</strong>。对于树的左右子树仍可使用以上步骤划分左右子树</li></ul></li><li>以上子树的递推性质是分治算法的体现，因此我们考虑使用递归对所有子树进行划分。</li></ul><h2 id="分治算法解析："><a href="#分治算法解析：" class="headerlink" title="分治算法解析："></a>分治算法解析：</h2><ul><li><strong>递推参数：</strong>根节点在前序遍历的索引<strong>root</strong>，子树在中序遍历的左边界<strong>left</strong>，子树在中序遍历的右边界<strong>right</strong></li><li><strong>终止条件：</strong>当<strong>left &gt;r ight</strong>，代表已经越过叶结点，此时返回null（相等时表示为自己）</li><li><strong>递推过程：</strong><ul><li><strong>建立根节点</strong>node：节点值为preorder[root]</li><li><strong>划分左右子树：</strong>查找根节点在中序遍历inorder中的索引 i</li><li><strong>构建左右子树：</strong>开启左右子树递归<ul><li>左子树：根节点索引—<strong>root+i</strong>；中序遍历左边界—<strong>left</strong>；中序遍历右边界—<strong>i-1</strong></li><li>右子树：根节点索引—<strong>i-left+root+1</strong>（左子树长度+根节点索引+1）；中序遍历左边界—<strong>i+1</strong>；中序遍历右边界—<strong>right</strong></li></ul></li></ul></li><li><strong>返回值：</strong>回溯返回node，作为上一层递归中根节点的左/右子节点</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] preorder; <span class="comment">//保留的先序遍历</span></span><br><span class="line">    Map&lt;Integer,Integer&gt; indexRoot = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;(); <span class="comment">//标记中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.preorder = preorder;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; preorder.length;i++)&#123;</span><br><span class="line">            indexRoot.put(inorder[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> recur(<span class="number">0</span>,<span class="number">0</span>,preorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode <span class="title">recur</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        TreeNode node = <span class="keyword">new</span> TreeNode(preorder[root]);  </span><br><span class="line">        <span class="keyword">int</span> i = indexRoot.get(preorder[root]);</span><br><span class="line">        node.left = recur(root + <span class="number">1</span>,left, i -<span class="number">1</span>);</span><br><span class="line">        node.right = recur(root + i - left + <span class="number">1</span>,i + <span class="number">1</span>,right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><ul><li><p><strong>时间复杂度:</strong> 其中 N为树的节点数量。初始化 HashMap 需遍历 inorder ，占用 O(N) 。递归共建立 N 个节点，每层递归中的节点建立、搜索操作占用 O(1) ，因此使用 O(N) 时间。</p></li><li><p><strong>空间复杂度：</strong> HashMap 使用 O(N)额外空间。最差情况下，树退化为链表，递归深度达到 N，占用 O(N)额外空间；最好情况下，树为满二叉树，递归深度为 logN ，占用 O(logN) 额外空间。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>初识jQuery</title>
    <link href="http://moersuo.github.io/2020/10/29/%E5%88%9D%E8%AF%86jQuery/"/>
    <id>http://moersuo.github.io/2020/10/29/%E5%88%9D%E8%AF%86jQuery/</id>
    <published>2020-10-29T03:20:14.000Z</published>
    <updated>2020-10-29T03:24:41.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-jQuery简介"><a href="#一-jQuery简介" class="headerlink" title="一.jQuery简介"></a>一.jQuery简介</h1><ul><li>jQuery顾名思义，就是JavaScript和查询（Query），它是辅助JavaScript开发的js类库</li><li>JQuery的核心思想是，write less, do more，实现了很多浏览器兼容问题</li><li>样例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://libs.baidu.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!--百度官方压缩后的cdn公共库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//表示页面加载完成后，相当于window.onload = function()&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $btnObj = $(<span class="string">"#bu"</span>); <span class="comment">//表示按id查询标签对象</span></span></span><br><span class="line"><span class="actionscript">            $btnObj.click(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="comment">//绑定单击事件</span></span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"jQuery 的单击事件"</span>);</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">"bu"</span>&gt;</span>say hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>为按钮添加响应函数<ul><li>使用jQuery查询到标签对象</li><li>使用标签对象.click（function（）{}）;</li></ul></li></ul><h1 id="二-jQuery的核心函数"><a href="#二-jQuery的核心函数" class="headerlink" title="二.jQuery的核心函数"></a>二.jQuery的核心函数</h1><ul><li><p>$是jQuery的核心函数，$()就是调用$这个函数</p></li><li><p>传入参数为函数，表示页面加载完成后，相当于window.onload = function(){}</p></li><li><p>传入参数为HTML字符串时， 会帮我们创建这个HTML标签对象</p></li><li><p>传入参数为选择器字符串时</p><ul><li>$(“#id属性值”) id选择器，根据id查询标签对象</li><li>$(“标签名”) 标签名选择器，根据指定的标签名查询标签对象</li><li>$(“.class属性值”) 类型选择器</li></ul></li><li><p>传入参数为Dom对象时，会把这个DOM对象专为jQuery对象</p></li></ul><h1 id="三-jQuery对象和Dom对象区别"><a href="#三-jQuery对象和Dom对象区别" class="headerlink" title="三. jQuery对象和Dom对象区别"></a>三. jQuery对象和Dom对象区别</h1><h2 id="3-1-什么是jQuery对象和Dom对象"><a href="#3-1-什么是jQuery对象和Dom对象" class="headerlink" title="3.1 什么是jQuery对象和Dom对象"></a>3.1 什么是jQuery对象和Dom对象</h2><h3 id="Dom对象："><a href="#Dom对象：" class="headerlink" title="Dom对象："></a>Dom对象：</h3><ul><li>通过getElementById()查询出来的标签对象是Dom对象</li><li>通过getElementByName()查询出来的标签对象是Dom对象</li><li>通过getElementByTagName()查询出来的标签对象是Dom对象</li><li>通过getElement()创建的对象是Dom对象</li><li>Dom对象alert出来的效果为：object HTML标签名Element</li></ul><h3 id="jQuery对象："><a href="#jQuery对象：" class="headerlink" title="jQuery对象："></a>jQuery对象：</h3><ul><li>通过jQuery提供的API创建的对象，是jQuery对象</li><li>通过jQuery包装的Dom对象，是jQuery对象</li><li>通过jQuery提供的API查询到的对象，是jQuery对象</li></ul><h2 id="3-2-jQuery对象的本质"><a href="#3-2-jQuery对象的本质" class="headerlink" title="3.2  jQuery对象的本质"></a>3.2  jQuery对象的本质</h2><ul><li>jQuery是Dom对象的数组+jQuery提供的一系列功能函数</li></ul><h2 id="3-3-jQuery对象和Dom对象使用上的区别"><a href="#3-3-jQuery对象和Dom对象使用上的区别" class="headerlink" title="3.3 jQuery对象和Dom对象使用上的区别"></a>3.3 jQuery对象和Dom对象使用上的区别</h2><ul><li>jQuery对象与Dom对象互相不能使用彼此的属性和方法</li></ul><h2 id="3-4-Dom对象和jQuery对象互转"><a href="#3-4-Dom对象和jQuery对象互转" class="headerlink" title="3.4 Dom对象和jQuery对象互转"></a>3.4 Dom对象和jQuery对象互转</h2><ul><li>Dom对象转化为jQuery对象<ul><li>先有Dom对象</li><li>$(Dom对象) 便可转化完成</li></ul></li><li>jQuery对象转化为Dom对象<ul><li>先有jQuery对象</li><li>jQuery对象[下标]取出相应的Dom对象</li></ul></li></ul><h1 id="四-jQuery属性操作"><a href="#四-jQuery属性操作" class="headerlink" title="四. jQuery属性操作"></a>四. jQuery属性操作</h1><h2 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h2><ul><li>它可以设置和获取起始标签和结束标签中的内容，等同dom属性innerHTML</li></ul><h2 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h2><ul><li>text()它可以设置和获取起始标签和结束标签中的文本，等同dom属性innerText</li></ul><h2 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h2><ul><li>它可以设置和获取表单项的value属性值</li></ul><h2 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h2><ul><li>可以设置和获取属性值,不推荐操作checked,readOnly,selected,disabled等</li></ul><h2 id="prop"><a href="#prop" class="headerlink" title="prop()"></a>prop()</h2><ul><li>可以设置和获取属性值，只推荐操作attr不推荐的操作</li></ul><h1 id="五-DOM的增删改"><a href="#五-DOM的增删改" class="headerlink" title="五. DOM的增删改"></a>五. DOM的增删改</h1><h2 id="内部插入："><a href="#内部插入：" class="headerlink" title="内部插入："></a>内部插入：</h2><ul><li>appendTo()    a.appendTo(b) 把a插入到b子元素末尾，成为最后一个元素</li><li>prepednTo()   a.prependTo(b) 把a插入到b所有子元素前面，成为第一个子元素</li></ul><h2 id="外部插入："><a href="#外部插入：" class="headerlink" title="外部插入："></a>外部插入：</h2><ul><li>insertAfter()      a.insertAfater(b) 得到ba</li><li>insertBefore()   a.insertAfater(b) 得到ab</li></ul><h2 id="替换："><a href="#替换：" class="headerlink" title="替换："></a>替换：</h2><ul><li>replaceWith()    a.replaceWith(b) 用b替换掉a</li><li>replaceAll()        a.replaceAll(b) 用a替换掉所有b</li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除:"></a>删除:</h2><ul><li>remove()       a.remove(); 删除a标签</li><li>empty()         a.empty(); 清空a标签内的内容</li></ul><h1 id="六-css样式操作"><a href="#六-css样式操作" class="headerlink" title="六. css样式操作"></a>六. css样式操作</h1><h2 id="addClass"><a href="#addClass" class="headerlink" title="addClass()"></a>addClass()</h2><ul><li>添加样式</li></ul><h2 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h2><ul><li>删除样式</li></ul><h2 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h2><ul><li>有就删除，没有就添加样式</li></ul><h2 id="offset"><a href="#offset" class="headerlink" title="offset()"></a>offset()</h2><ul><li>获取和设置元素的坐标</li></ul><h1 id="七-jQuery动画"><a href="#七-jQuery动画" class="headerlink" title="七. jQuery动画"></a>七. jQuery动画</h1><h2 id="基本动画："><a href="#基本动画：" class="headerlink" title="基本动画："></a>基本动画：</h2><ul><li><strong>show()</strong> 将隐藏的元素显示</li><li><strong>hide()</strong>   将可见的元素隐藏</li><li><strong>toggle()</strong> 可见就隐藏，不可见就显示</li><li>以上动画方法都可以添加参数<ul><li>第一个参数是动画执行时长，以毫秒为单位</li><li>第二个参数是动画的回调函数（动画完成后自动调用的函数）</li></ul></li></ul><h2 id="淡入淡出动画："><a href="#淡入淡出动画：" class="headerlink" title="淡入淡出动画："></a>淡入淡出动画：</h2><ul><li><strong>fadeIn()</strong>      淡入（慢慢可见）</li><li><strong>fadeOut()</strong>   淡出（慢慢消失）</li><li><strong>fadeTo()</strong>      在指定时长内慢慢的将透明度修改到指定的值（0完全不可见，1完全可见，0.5半透明）</li><li><strong>fadeToggle()</strong> 淡入淡出切换</li><li>参数添加同上</li></ul><h1 id="八-jQuery事件操作"><a href="#八-jQuery事件操作" class="headerlink" title="八. jQuery事件操作"></a>八. jQuery事件操作</h1><h2 id="function-和window-onload-function-区别"><a href="#function-和window-onload-function-区别" class="headerlink" title="$(function(){});和window.onload = function(){}区别"></a>$(function(){});和window.onload = function(){}区别</h2><ul><li><strong>jQuery页面加载完成之后先执行，原生js页面加载完成后执行</strong></li><li><strong>jQuery的页面加载完成之后是浏览器的内核解析完页面的标签创建好DOM对象之后就会马上执行</strong></li><li><strong>原生js的页面加载完成之后，除了要等浏览器内核解析完标签创建好对象，还要等标签显示时候需要的内容加载完成</strong></li><li><strong>原生js的页面加载完成后，只会执行最后一次的赋值函数</strong></li><li><strong>jQuery的页面加载完成之后，会把全部注册的function函数，依次顺序全部执行</strong></li></ul><h2 id="jQuery中其他的事件处理方法："><a href="#jQuery中其他的事件处理方法：" class="headerlink" title="jQuery中其他的事件处理方法："></a>jQuery中其他的事件处理方法：</h2><h3 id="click"><a href="#click" class="headerlink" title="click()"></a>click()</h3><ul><li><strong>它可以绑定单机事件，以及触发单击事件</strong>（传function为绑定，不传为触发）</li></ul><h3 id="mouseover"><a href="#mouseover" class="headerlink" title="mouseover()"></a>mouseover()</h3><ul><li><strong>鼠标移入事件</strong></li></ul><h3 id="mouseout"><a href="#mouseout" class="headerlink" title="mouseout()"></a>mouseout()</h3><ul><li><strong>鼠标移出事件</strong></li></ul><h3 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h3><ul><li><strong>可以给元素一次性绑定一个或多个事件</strong></li></ul><h3 id="one"><a href="#one" class="headerlink" title="one()"></a>one()</h3><ul><li><strong>使用上和bind一样，但是one方法绑定的事件，只会触发一次</strong></li></ul><h3 id="unbind"><a href="#unbind" class="headerlink" title="unbind()"></a>unbind()</h3><ul><li><strong>同bind相反，解除事件的绑定</strong></li></ul><h3 id="live"><a href="#live" class="headerlink" title="live()"></a>live()</h3><ul><li><strong>也是用来绑定事件，它可以用来绑定选择器匹配的所有元素的事件，哪怕这个元素是后面动态绑定的也有效</strong></li></ul><h2 id="事件的冒泡："><a href="#事件的冒泡：" class="headerlink" title="事件的冒泡："></a>事件的冒泡：</h2><ul><li><strong>事件的冒泡指，父子元素同时监听同一个事件。当触发子元素事件的同时，同一个事件也被传递到了父元素的事件里去响应</strong></li><li><strong>在事件函数体内，return false; 可以阻止事件的冒泡传递</strong></li></ul><h2 id="JavaScript事件对象："><a href="#JavaScript事件对象：" class="headerlink" title="JavaScript事件对象："></a>JavaScript事件对象：</h2><ul><li>事件对象，是封装有触发的事件信息的一个js对象</li><li>在给元素绑定事件的时候，在事件的function(event)参数列表中添加一个参数，这个参数名，我们习惯称为event,这个event就是js传递参事件处理函数的事件对象</li></ul><h1 id="九-jQuery选择器"><a href="#九-jQuery选择器" class="headerlink" title="九. jQuery选择器"></a>九. jQuery选择器</h1><ul><li>jQuery选择器允许对HTML元素组或单个元素进行操作</li><li>jQuery 选择器基于元素的 id、类、类型、属性、属性值等”查找”（或选择）HTML 元素。 它基于已经存在的css选择器，除此之外，它还有一些自定义的选择器。</li><li>jQuery 中所有选择器都以美元符号开头：$()。</li></ul><h2 id="元素选择器："><a href="#元素选择器：" class="headerlink" title="元素选择器："></a>元素选择器：</h2><ul><li>jQuery 元素选择器基于元素名选取元素。</li><li>在页面中选取所有&lt;p&gt;元素  <strong>$(“p”)</strong></li></ul><h2 id="id选择器："><a href="#id选择器：" class="headerlink" title="id选择器："></a>id选择器：</h2><ul><li>jQuery #id 选择器通过 HTML 元素的 id 属性选取指定的元素。页面中元素的 id 应该是唯一的，所以您要在页面中选取唯一的元素需要通过 #id 选择器。</li><li><strong>$(“#test”)</strong></li></ul><h2 id="class选择器"><a href="#class选择器" class="headerlink" title=".class选择器"></a>.class选择器</h2><ul><li>jQuery 类选择器可以通过指定的 class 查找元素。</li><li><strong>$(“.test”)</strong></li></ul><h3 id="“-”"><a href="#“-”" class="headerlink" title="$(“*”)"></a>$(“*”)</h3><ul><li>选取所有元素</li></ul><h2 id="“this”"><a href="#“this”" class="headerlink" title="$(“this”)"></a>$(“this”)</h2><ul><li>选取当前HTML元素</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-jQuery简介&quot;&gt;&lt;a href=&quot;#一-jQuery简介&quot; class=&quot;headerlink&quot; title=&quot;一.jQuery简介&quot;&gt;&lt;/a&gt;一.jQuery简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;jQuery顾名思义，就是JavaScript和查询（Query
      
    
    </summary>
    
    
      <category term="后端学习" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="jQuery" scheme="http://moersuo.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>HTML+CSS+JS基础</title>
    <link href="http://moersuo.github.io/2020/10/23/HTML-CSS-JS%E5%9F%BA%E7%A1%80/"/>
    <id>http://moersuo.github.io/2020/10/23/HTML-CSS-JS%E5%9F%BA%E7%A1%80/</id>
    <published>2020-10-23T09:53:18.000Z</published>
    <updated>2020-10-25T02:20:23.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-HTML和CSS基本框架"><a href="#一-HTML和CSS基本框架" class="headerlink" title="一.HTML和CSS基本框架"></a>一.HTML和CSS基本框架</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  <span class="comment">&lt;!--约束，声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span> <span class="comment">&lt;!--html标签标示html的开始，lang="zh-CN"表示中文，html标签中包含两部分，head和body--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span> <span class="comment">&lt;!--表示当前页面使用UTF-8字符集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span>   <span class="comment">&lt;!--表示标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="comment">&lt;!--头信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="comment">&lt;!--整个html页面显示的主体--&gt;</span></span><br><span class="line">    hello world！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> <span class="comment">&lt;!--整个html的结束--&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二-HTML标签"><a href="#二-HTML标签" class="headerlink" title="二.HTML标签"></a>二.HTML标签</h1><h2 id="2-1-标签的格式"><a href="#2-1-标签的格式" class="headerlink" title="2.1 标签的格式"></a>2.1 标签的格式</h2><p>​    <strong>&lt;标签名&gt;封装的数据&lt;/标签名&gt;</strong></p><h2 id="2-2-标签名大小写不敏感"><a href="#2-2-标签名大小写不敏感" class="headerlink" title="2.2 标签名大小写不敏感"></a>2.2 标签名大小写不敏感</h2><h2 id="2-3-标签的属性"><a href="#2-3-标签的属性" class="headerlink" title="2.3 标签的属性"></a>2.3 标签的属性</h2><ul><li><strong>基本属性：</strong>可以修改简单的样式效果</li><li><strong>事件属性：</strong>可以直接设置事件响应后的代码</li></ul><h2 id="2-4-单标签和双标签"><a href="#2-4-单标签和双标签" class="headerlink" title="2.4 单标签和双标签"></a>2.4 单标签和双标签</h2><ul><li><strong>单标签格式：</strong>&lt;标签名/&gt;  br 换行 hr水平线</li><li><strong>双标签格式：</strong>&lt;标签名&gt;封装的数据&lt;/标签名&gt;</li></ul><h2 id="2-5-标签的语法"><a href="#2-5-标签的语法" class="headerlink" title="2.5 标签的语法"></a>2.5 标签的语法</h2><ul><li><strong>标签不能交叉嵌套</strong></li><li><strong>标签必须正确关闭</strong></li><li><strong>属性值必须加引号</strong></li><li><strong>注释不能嵌套</strong></li></ul><h2 id="2-6-常用标签"><a href="#2-6-常用标签" class="headerlink" title="2.6 常用标签"></a>2.6 常用标签</h2><h3 id="font字体标签：修饰文本"><a href="#font字体标签：修饰文本" class="headerlink" title="font字体标签：修饰文本"></a>font字体标签：修饰文本</h3><ul><li><strong>face</strong>属性修改字体</li><li><strong>color</strong>修改颜色</li><li><strong>size</strong>修改大小</li></ul><h3 id="特殊字符："><a href="#特殊字符：" class="headerlink" title="特殊字符："></a>特殊字符：</h3><ul><li>&lt; 的实体名称：&amp;lt</li><li>大于号&gt;的实体名称: &amp;gt</li><li>空格 &amp;nbsp</li></ul><h3 id="标题标签："><a href="#标题标签：" class="headerlink" title="标题标签："></a>标题标签：</h3><ul><li>h1 - h6 （h1最大）</li><li>align：对齐属性<ul><li>left （默认）</li><li>center</li><li>right</li></ul></li></ul><h3 id="超链接：从一个网页指向另一个网页的链接关系"><a href="#超链接：从一个网页指向另一个网页的链接关系" class="headerlink" title="超链接：从一个网页指向另一个网页的链接关系"></a>超链接：从一个网页指向另一个网页的链接关系</h3><ul><li>使用a标签表示<ul><li>href属性设置连接的地址</li><li>target属性设置哪个目标进行跳转<ul><li>_self 表示当前页面</li><li>_blank 表示打开新页面进行跳转</li></ul></li></ul></li></ul><h3 id="列表标签："><a href="#列表标签：" class="headerlink" title="列表标签："></a>列表标签：</h3><ul><li>无序列表：<ul></ul><ul><li>type属性可以修改列表项前的符号</li><li><li></li> 列表项</li></ul></li><li>有序列表：<ol></ol></li></ul><h3 id="img标签：在html页面上显示图片"><a href="#img标签：在html页面上显示图片" class="headerlink" title="img标签：在html页面上显示图片"></a>img标签：在html页面上显示图片</h3><ul><li>src属性可以设置图片的路径<ul><li>javaSE中相对路径和绝对路径<ul><li>相对路径：从工程名起算</li><li>绝对路径：盘符:/目录/文件名</li></ul></li><li>在web中路径分为相对路径和绝对路径<ul><li>相对路径：<ul><li>.  表示当前文件所在目录</li><li>..  表示当前文件所在上一级目录</li><li>文件名 表示当前文件所在目录的文件，相当于./文件名（./可以省略）</li></ul></li><li>绝对路径：<a href="http://ip:port/工程名/资源路径">http://ip:port/工程名/资源路径</a></li></ul></li></ul></li><li>width属性设置图片宽度</li><li>height属性设置图片高度</li><li>border属性设置边框</li><li>alt属性设置当指定路径找不到时，显示alt文字作为替换</li></ul><h3 id="table标签：表格标签"><a href="#table标签：表格标签" class="headerlink" title="table标签：表格标签"></a>table标签：表格标签</h3><ul><li>table：<ul><li>border</li><li>width</li><li>height</li><li>align：设置表格相对于页面的对齐方式</li><li>cellspacing：设置单元格间距</li></ul></li><li>tr：行标签</li><li>th：表头标签</li><li>td：单元标签<ul><li>align设置单元格文本的对齐方式</li><li>colspan属性设置跨列</li><li>rowspan设置跨行</li></ul></li></ul><h3 id="iframe框架标签（内嵌窗口）"><a href="#iframe框架标签（内嵌窗口）" class="headerlink" title="iframe框架标签（内嵌窗口）"></a>iframe框架标签（内嵌窗口）</h3><ul><li><strong>可以在一个html页面上，开辟一个小区域，去加载一个单独的页面。</strong></li><li>iframe和a标签组合使用的步骤<ul><li>在iframe标签中使用name属性定义一个名称</li><li>在a标签的target属性上设置iframe的属性值</li></ul></li></ul><h3 id="表单标签：form"><a href="#表单标签：form" class="headerlink" title="表单标签：form"></a>表单标签：form</h3><h4 id="基本内容："><a href="#基本内容：" class="headerlink" title="基本内容："></a>基本内容：</h4><ul><li><p>html页面中，用来收集用户信息的所有元素集合，然后把这些信息发送给服务器。</p></li><li><p>&lt;input type=”text” vale=”默认值”&gt;文本输入框</p></li><li><p>&lt;input type=”password” vale=”默认值”&gt;密码输入框</p></li><li><p>&lt;input type=”radio” name=”性别”&gt; 单选框（name属性进行分组，checed=”checked”默认选中）</p></li><li><p>&lt;input type=”checkbox”&gt;复选框</p></li><li><p>select标签：下拉列表框</p><ul><li>option标签：下拉列表框中的选项，select=”selected”设置默认选中</li></ul></li><li><p>textarea标签：表示多行文本输入框</p><ul><li>rows属性设置可以显示几行的高度</li><li>cols属性设置每行可显示几个字符宽度</li><li>起始标签和结束标签中的内容为默认值</li></ul></li><li><p>&lt;input type=”reset”&gt; 重置按钮，回复为默认值。value属性修改按钮上的文本</p></li><li><p>&lt;input type=”submit”&gt; 提交按钮，value属性修改按钮上的文本</p></li><li><p>&lt;input type=”button”&gt; 按钮，alue属性修改按钮上的文本</p></li><li><p>&lt;input type=”file”&gt; 文件上传域</p></li><li><p>&lt;input type=”hidden”&gt; 隐藏域，发送某些不需要用户看见的信息，会被服务器接受</p></li></ul><h4 id="表单格式化："><a href="#表单格式化：" class="headerlink" title="表单格式化："></a><strong>表单格式化：</strong></h4><ul><li>使用table标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">vale</span>=<span class="string">"默认值"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">vale</span>=<span class="string">"默认值"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="提交细节"><a href="#提交细节" class="headerlink" title="提交细节:"></a>提交细节:</h4><ul><li>action属性设置提交的服务器地址</li><li>method属性设置提交的防止GET（默认值）或POST<ul><li>GET请求特点：<ul><li>浏览器地址栏中的地址是：action属性【+？+请求参数】，请求参数的格式：name=value&amp;name=value</li><li>不安全</li><li>有数据长度的限制</li></ul></li><li>post请求特点：<ul><li>浏览器地址栏中的地址只有action属性</li><li>相对于GET安全</li><li>理论上没有数据长度限制</li></ul></li></ul></li><li>表单提交时，数据没有发送给服务器的三种情况：<ul><li>表单项没有name属性值</li><li>单选，复选（下拉列表中的option标签）都需要添加value属性，用来发送给服务器</li><li>表单项不在提交的form标签中</li></ul></li></ul><h2 id="2-7-其他标签"><a href="#2-7-其他标签" class="headerlink" title="2.7 其他标签"></a>2.7 其他标签</h2><h3 id="div标签："><a href="#div标签：" class="headerlink" title="div标签："></a>div标签：</h3><ul><li><strong>默认独占一行</strong></li></ul><h3 id="span标签："><a href="#span标签：" class="headerlink" title="span标签："></a>span标签：</h3><ul><li><strong>它的长度是封装数据的长度</strong></li></ul><h3 id="p段落标签："><a href="#p段落标签：" class="headerlink" title="p段落标签："></a>p段落标签：</h3><ul><li><strong>默认会在段落的上方或下方各空出一行（如果已有就不再空）</strong></li></ul><h1 id="三-css"><a href="#三-css" class="headerlink" title="三.css"></a>三.css</h1><h2 id="3-1-概述："><a href="#3-1-概述：" class="headerlink" title="3.1 概述："></a>3.1 概述：</h2><ul><li>css是层叠样式表单，是用于（增强）控制网页样式并允许将样式信息与网页内容分离的一种标记性语言</li></ul><h2 id="3-2-css语法规则"><a href="#3-2-css语法规则" class="headerlink" title="3.2 css语法规则:"></a>3.2 css语法规则:</h2><h3 id="选择器："><a href="#选择器：" class="headerlink" title="选择器："></a>选择器：</h3><ul><li>浏览器根据选择器绝对受css样式影响的HTML元素（标签）</li></ul><h3 id="属性（property）："><a href="#属性（property）：" class="headerlink" title="属性（property）："></a>属性（property）：</h3><ul><li>是打算更改的样式名，并且每个属性都有一个值，属性和值被冒号分开，并由花括号包围，这样就组成了一个完整的样式声明（declaration），eg：p{color:blue}</li><li>多个声明：如果要定义不止一个声明，则需要用分号将每个声明分开，虽然最后一条声明的最后可以不加分号（但尽量加）eg：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">color:red;</span><br><span class="line">font_size:30px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--一般每行只写一个属性--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-CSS结合HTML"><a href="#3-3-CSS结合HTML" class="headerlink" title="3.3 CSS结合HTML"></a>3.3 CSS结合HTML</h2><ul><li><p>在标签的style属性上设置<strong>“key:value value;”</strong>修改标签样式</p></li><li><p>在head标签中，使用style标签定义各种自己想要的css样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">xxx&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">key</span><span class="selector-pseudo">:value</span> <span class="selector-tag">value</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>把css样式写成一个单独的css文件，再通过link标签引入即可复用</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"theme.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--rel:规定当前文档与被链接文档之间的关系。</span></span><br><span class="line"><span class="comment">type:规定被链接文档的 MIME 类型。</span></span><br><span class="line"><span class="comment">href:规定被链接文档的位置。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-4-css选择器"><a href="#3-4-css选择器" class="headerlink" title="3.4 css选择器:"></a>3.4 css选择器:</h2><ul><li><strong>标签名选择器</strong>:可以决定哪些标签被动的使用这个样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">标签名&#123;</span></span><br><span class="line"><span class="comment">属性：值；</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">div&#123;</span><br><span class="line">border: 1px solid yellow;</span><br><span class="line"><span class="css"><span class="selector-tag">color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line">font-size；30px;</span><br><span class="line">&#125;</span><br><span class="line">span&#123;</span><br><span class="line">border: 1px solid yellow;</span><br><span class="line"><span class="css"><span class="selector-tag">color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line">font-size；30px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>id选择器：</strong>可以让我们通过id属性选择的去使用这个样式（需要在标签上定义id属性）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">#id属性值&#123;</span></span><br><span class="line"><span class="comment">属性：值;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">#id001&#123;</span><br><span class="line">border: 1px solid yellow;</span><br><span class="line">color:blue;</span><br><span class="line">font-size；30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>class类型选择器（类选择器）：</strong>可以通过class属性有效的选择性地去使用这个样式(需要在标签定义class属性)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">.class属性值&#123;</span></span><br><span class="line"><span class="comment">属性：值</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>id与class区别：</strong>id唯一，class可以复用</p></li><li><p><strong>组合选择器：</strong>组合选择器可以让多个选择器共用同一个css样式代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">选择器1，选择器2，选择器3&#123;</span></span><br><span class="line"><span class="comment">属性，值；</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-5-css常用样式"><a href="#3-5-css常用样式" class="headerlink" title="3.5 css常用样式"></a>3.5 css常用样式</h2><ul><li><p><strong>颜色：</strong>color:red</p></li><li><p><strong>宽度：</strong>可以写像素值，或百分比值</p></li><li><p><strong>高度：</strong>同宽度</p></li><li><p><strong>背景颜色：</strong>blacground-color:#OF2CD</p></li><li><p><strong>字体样式：</strong></p><ul><li>color</li><li>font-size</li></ul></li><li><p><strong>边框：</strong>border:</p></li><li><p><strong>div居中：</strong></p><ul><li>margin-left:auto;</li><li>margin-right:auto;</li></ul></li><li><p><strong>文本居中：</strong>text-align:center;</p></li><li><p><strong>超链接去下划线：</strong>text-decoration:none;</p></li><li><p><strong>表格细线：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">table&#123;</span><br><span class="line">border:1px solid black;<span class="comment">&lt;!--设置边框--&gt;</span></span><br><span class="line">border-collapse:collapse;<span class="comment">&lt;!--合并边框--&gt;</span></span><br><span class="line">&#125;</span><br><span class="line">td,th&#123;</span><br><span class="line">border:1px solid black;<span class="comment">&lt;!--设置边框--&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>列表去除修饰：</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul&#123;</span><br><span class="line">list-style:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-JavaScript"><a href="#四-JavaScript" class="headerlink" title="四.JavaScript"></a>四.JavaScript</h1><h2 id="4-1-概述："><a href="#4-1-概述：" class="headerlink" title="4.1 概述："></a>4.1 概述：</h2><ul><li>JavaScript语言主要用来完成页面的数据验证，因此它运行在客户端，需要运行浏览器来解析执行JavaScript代码。JS是若类型，Java为强类型。（强类型指一个变量被定义类型后，如果不进行强制转换，则永远为该数据类型；弱类型定义的变量则可以随环境自行转换）</li><li><strong>特点：</strong><ul><li><strong>交互性</strong>—可以做信息的动态交互</li><li><strong>安全性</strong>—不允许直接访问本地硬盘</li><li><strong>跨平台性</strong>—只要可以解释JS的浏览器都可以执行，和平台无关</li></ul></li></ul><h2 id="4-2-JavaScript和html的结合方式"><a href="#4-2-JavaScript和html的结合方式" class="headerlink" title="4.2 JavaScript和html的结合方式"></a>4.2 JavaScript和html的结合方式</h2><ul><li>在head标签或body标签中，使用script标签来书写JavaScript代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//alert是javascript提供的一个警告函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//可以接受任意类型的参数，这个参数就是警告框的提示信息</span></span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">"Hello World"</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用script标签引入单独的JavaScript代码文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span> <span class="attr">src</span> = <span class="string">"1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--src文件专门用来引入js文件路径，相对绝对均可--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>script标签定义js代码和引入js文件这两个功能，只能选其一使用 </li></ul><h2 id="4-3-变量"><a href="#4-3-变量" class="headerlink" title="4.3 变量"></a>4.3 变量</h2><ul><li><strong>变量类型;</strong><ul><li>数值类型：number</li><li>字符串类型：string</li><li>对象类型：object</li><li>布尔类型:boolean</li><li>函数类型：function</li></ul></li><li><strong>特殊值：</strong><ul><li>undefined：未定义，所有js变量未赋初始值时默认值均为undefined</li><li>null：空值</li><li>NAN(Not a Number)：非数字，非数值</li></ul></li><li><strong>变量定义格式</strong><ul><li>var 变量名;</li><li>var 变量名 = 值；</li></ul></li><li><strong>关系（比较运算）</strong><ul><li>等于 == 简单的做字面值的比较</li><li>全等于 === 除了字面值的比较，还要比较变量的类型</li></ul></li><li><strong>逻辑运算</strong><ul><li>在js中，所有变量，都可以作为一个boolean变量去使用</li><li>0，null,undefined,””(空串)   均可视为false</li><li>&amp;&amp;且运算<ul><li>当表达式全为真时，返回最后一个表达式的值</li><li>当表达式中，有一个为假时，返回第一个为假的值</li></ul></li><li>||运算<ul><li>当表达式全为假时，返回最后一个表达式的值</li><li>只有一个表达式为真，返回第一个为真的表达式的值</li></ul></li></ul></li></ul><h2 id="4-4-数组"><a href="#4-4-数组" class="headerlink" title="4.4 数组"></a>4.4 数组</h2><ul><li>数组定义方式：<ul><li>var 数组名={}   //空数组</li><li>var 数组名={1,”abc”,true}    //定义数组同时赋值元素 </li></ul></li><li>js中的数组，只要我们通过数组下标赋值，那么最大的下表值，就会自动的给数组扩容。</li></ul><h2 id="4-5-函数"><a href="#4-5-函数" class="headerlink" title="4.5 函数"></a>4.5 函数</h2><ul><li>可以通过function关键字定义函数</li><li><strong>function 函数名(形参列表){函数体}</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"调用无参函数"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">(a,b)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"调用有参函数"</span>+a+b);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    fun2(<span class="number">1</span>,<span class="string">"a"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(a,b)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> result = a+b;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">return</span> result;</span></span><br><span class="line">    &#125;</span><br><span class="line">    alert(sum(2,3))</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// 函数调用才会执行</span><br><span class="line">// 在js中，定义有返回值的函数，只需在函数体内直接使用return返回即可</span><br></pre></td></tr></table></figure><ul><li><strong>var 函数名 = function(形参列表){函数体}</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> fun3 = <span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"有参函数"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">    fun(1,2);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>在js函数中可以重载，但会覆盖掉上一次的定义（不允许重载）</strong></li><li><strong>函数的arguments隐形参数（只在function函数内）</strong><ul><li><strong>概念：</strong>在function中不需要定义，就可以直接用用来获取所有参数的变量。像java中的可变长参数,可以当作数组操作。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">        alert(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span></span><br><span class="line"><span class="javascript">        alert(<span class="built_in">arguments</span>[<span class="number">2</span>]);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="built_in">arguments</span>[i]);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        alert(<span class="string">"调用函数"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    fun(<span class="string">"1"</span>,<span class="number">1</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-5-JS中的自定义对象"><a href="#4-5-JS中的自定义对象" class="headerlink" title="4.5 JS中的自定义对象"></a>4.5 JS中的自定义对象</h2><h3 id="Object形式的自定义对象："><a href="#Object形式的自定义对象：" class="headerlink" title="Object形式的自定义对象："></a>Object形式的自定义对象：</h3><ul><li><strong>对象的定义：</strong><ul><li><strong>var 变量名 = new Object{};</strong>  //对象实例（空对象）</li><li><strong>变量名.属性名=值</strong>       //定义一个属性</li><li><strong>变量名.函数名 = function(){}</strong> // 定义一个函数</li></ul></li><li><strong>对象的访问：</strong><ul><li>变量:属性/函数名();</li></ul></li></ul><h3 id="形式的自定义对象："><a href="#形式的自定义对象：" class="headerlink" title="{}形式的自定义对象："></a>{}形式的自定义对象：</h3><ul><li><strong>对象的定义：</strong><ul><li>var 变量名 = {};  //空对象</li><li>var 变量名 = {属性:值}  //定义一个属性（若要定义多个内容，则使用逗号分开）</li><li>var 变量名 = {函数名:function(){}}</li></ul></li><li><strong>对象的访问：</strong><ul><li>变量:属性/函数名();</li></ul></li></ul><h2 id="4-6-JS中的事件"><a href="#4-6-JS中的事件" class="headerlink" title="4.6 JS中的事件"></a>4.6 JS中的事件</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li><strong>事件是电脑输入设备与页面进行交互的响应</strong></li></ul><h3 id="常用的事件："><a href="#常用的事件：" class="headerlink" title="常用的事件："></a>常用的事件：</h3><ul><li><strong>onload 加载完成事件：</strong>页面加载完成后，常用来做页面js代码初始化操作</li><li><strong>onclick 单机时间：</strong>常用于按钮的点击响应</li><li><strong>onblur 失去焦点事件：</strong>常用于输入框失去焦点后验证其输入内容是否合法</li><li><strong>onchange 内容发生改变事件：</strong>常用于下拉列表和输入框内容发生改变后操作</li><li><strong>onsubmit 表单提交事件：</strong>常用于表单提交前，验证所有表单项是否合法</li></ul><h3 id="两种事件的注册（绑定）："><a href="#两种事件的注册（绑定）：" class="headerlink" title="两种事件的注册（绑定）："></a>两种事件的注册（绑定）：</h3><ul><li><strong>概念：</strong>告知浏览器，当事件响应结束后要执行哪些代码</li><li><strong>静态注册事件：</strong>通过html标签的事件属性直接赋予事件响应后的代码</li><li><strong>动态注册：</strong>先通过js代码得到标签的dom对象，然后再通过<strong>dom 对象.事件名 = function(){}</strong>，这种形式赋予事件响应后的代码。基本步骤：<ul><li>获取标签对象</li><li>标签对象.事件名=function(){}</li></ul></li></ul><h3 id="onload事件："><a href="#onload事件：" class="headerlink" title="onload事件："></a>onload事件：</h3> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态注册onload事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">onloadFun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">       alert(<span class="string">"静态注册onload事件"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"onloadFun();"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--动态注册onload事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"动态注册onload事件"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onclick事件"><a href="#onclick事件" class="headerlink" title="onclick事件"></a>onclick事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态注册onclick事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">onclickFun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">       alert(<span class="string">"静态注册onclick事件"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span> = <span class="string">"onclickFun()"</span>&gt;</span></span><br><span class="line">        按钮</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--动态注册onclick事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// document是js中提供的一个对象（文档）</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// getElementById 通过id属性获取标签对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btnObj = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>)</span></span><br><span class="line"><span class="actionscript">        btnObj.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"动态注册onclick事件"</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">btn1</span>"&gt;</span></span><br><span class="line">        按钮</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onblur事件："><a href="#onblur事件：" class="headerlink" title="onblur事件："></a>onblur事件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--静态注册onblur事件--&gt;</span><br><span class="line">&lt;script type &#x3D; &quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    function onblurFun()&#123;</span><br><span class="line">        &#x2F;&#x2F; comsole是控制台对象，由js提供，专门用来向浏览器的控制器打印输出，用于测试使用</span><br><span class="line">        &#x2F;&#x2F;log 是打印的方法</span><br><span class="line">        console.log(&quot;静态注册失去焦点事件&quot;)；</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    用户名:&lt;input type &#x3D; &quot;text&quot; onblur&#x3D;&quot;onblurFun();&quot;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    密码:&lt;input type &#x3D; &quot;text&quot;&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;!--动态注册onblur事件--&gt;</span><br><span class="line">&lt;script type &#x3D; &quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    window.onload &#x3D; function()&#123;</span><br><span class="line">    var passworldObj &#x3D; document.getElementById(&quot;passworld&quot;);</span><br><span class="line">    passworldObj.onblur &#x3D; function()&#123;</span><br><span class="line">    console.log(&quot;动态注册失去焦点事件&quot;)；</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    用户名:&lt;input type &#x3D; &quot;text&quot; onblur&#x3D;&quot;onblurFun();&quot;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    密码:&lt;input id &#x3D; &quot;passworld&quot; type &#x3D; &quot;text&quot;&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="onchange事件"><a href="#onchange事件" class="headerlink" title="onchange事件:"></a>onchange事件:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">onchangeFun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"number was changed"</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> selObj = <span class="built_in">document</span>.getElementById(<span class="string">"se1"</span>);</span></span><br><span class="line"><span class="actionscript">            selObj.onchange = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"size was changed"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态注册onchange事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onchange</span>=<span class="string">"onchangeFun();"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--number--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--1--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--2--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--3--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--动态注册onchange事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span> = <span class="string">"se1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--size--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--s--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--m--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--l--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onsubmit事件："><a href="#onsubmit事件：" class="headerlink" title="onsubmit事件："></a>onsubmit事件：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//静态注册表单提交事件</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">onsubmitFun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 要验证所有表单项是否合法，如果有一个不合法就阻止表单提交</span></span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"静态注册表单提交事件--发现不合法"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        <span class="comment">//动态注册</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> formObj = <span class="built_in">document</span>.getElemenBytId(<span class="string">"fo1"</span>);</span></span><br><span class="line"><span class="actionscript">            formObj.onsubmit = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"静态注册表单提交事件--发现不合法"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--return false 可以阻止表单提交--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">"http://localhost:8080"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">onsubmit</span>=<span class="string">" return onsubmitFun();"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"submit"</span> <span class="attr">value</span> = <span class="string">"静态注册"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">"http://localhost:8080"</span> <span class="attr">id</span> = <span class="string">fo1</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"submit"</span> <span class="attr">value</span> = <span class="string">"动态注册"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-7-DOM模型"><a href="#4-7-DOM模型" class="headerlink" title="4.7 DOM模型"></a>4.7 DOM模型</h2><h3 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h3><ul><li>全称为<strong>Document Object Mobel</strong>文档对象模型，就是把文档中的<strong>标签</strong>，<strong>属性</strong>，<strong>文本</strong>，都转换为对象来管理。</li><li>Document 管理了<strong>所有的HTML文档内容</strong></li><li>Document 是一种<strong>树结构</strong>的文档，有层级关系</li><li>Document 使<strong>所有的标签对象化</strong></li><li>可以通过document访问所有的标签对象</li></ul><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ul><li><strong>getElementById:</strong>根据id属性，获取标签对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//需求：当用户点击校验按钮后，要获取输出框中的内容，然后验证其是否合法</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 验证的规则为，必须由字母，数字，下划线组成，且长度为5-12位</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">onclickFun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//当我们要获取一个标签时，一定要先获取其对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> usernameObj = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#123;Object HTMLInputElement&#125;它就是dom对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> usernameText = usernameObj.value;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 使用正则表达式，验证字符串是否符合规则</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> patt = <span class="regexp">/^\w&#123;5,12&#125;$/</span>;</span></span><br><span class="line">            /*</span><br><span class="line">                test()方法用来测试某个字符串，是不是匹配我的规则</span><br><span class="line"><span class="actionscript">                匹配就反回<span class="literal">true</span>,否则返回<span class="literal">false</span></span></span><br><span class="line">             */</span><br><span class="line">            if(patt.test(usernameText))&#123;</span><br><span class="line"><span class="actionscript">                alert(<span class="string">"用户名合法"</span>);</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"用户名非法"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">id</span> = <span class="string">"username"</span> <span class="attr">value</span> = <span class="string">"用户名"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"onclickFun()"</span>&gt;</span>校验<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//需求：当用户点击校验按钮后，要获取输出框中的内容，然后验证其是否合法</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 验证的规则为，必须由字母，数字，下划线组成，且长度为5-12位</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">onclickFun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//当我们要获取一个标签时，一定要先获取其对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> usernameObj = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#123;Object HTMLInputElement&#125;它就是dom对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> usernameText = usernameObj.value;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 使用正则表达式，验证字符串是否符合规则</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> patt = <span class="regexp">/^\w&#123;5,12&#125;$/</span>;</span></span><br><span class="line">            /*</span><br><span class="line">                test()方法用来测试某个字符串，是不是匹配我的规则</span><br><span class="line"><span class="actionscript">                匹配就反回<span class="literal">true</span>,否则返回<span class="literal">false</span></span></span><br><span class="line">             */</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> usernameSpanObj = <span class="built_in">document</span>.getElementById(<span class="string">"usernameSpan"</span>);</span></span><br><span class="line">            if(patt.test(usernameText))&#123;</span><br><span class="line"><span class="actionscript">                usernameSpanObj.innerHTML=<span class="string">"用户名合法"</span>;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                usernameSpanObj.innerHTML=<span class="string">"用户名非法"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">id</span> = <span class="string">"username"</span> <span class="attr">value</span> = <span class="string">"用户名"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">"usernameSpan"</span> <span class="attr">style</span> = <span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"onclickFun()"</span>&gt;</span>校验<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>getElementsByName</strong>(elementName):是根据指定的name属性查询返回多个标签对象集合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//全选</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">checkAll</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//document.getElementsByName;是根据指定的name属性查询返回多个标签对象集合</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//这个集合的操作同数组一样</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//集合中每个元素都是dom对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//这个集合的缘啊苏顺序是他们在html页面中从上到下的顺序</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hobbies = <span class="built_in">document</span>.getElementsByName(<span class="string">"hobby"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// checked 表示复选框的选中状态，选中为true，不选中为false，该属性可读可写</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hobbies.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">                hobbies[i].checked = <span class="literal">true</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">        &#125;<span class="comment">//全不选</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">checkNo</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hobbies = <span class="built_in">document</span>.getElementsByName(<span class="string">"hobby"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hobbies.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">                hobbies[i].checked = <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">        &#125;<span class="comment">//反选</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">checkReverse</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hobbies = <span class="built_in">document</span>.getElementsByName(<span class="string">"hobby"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hobbies.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(hobbies[i].checked == <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    hobbies[i].checked = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    hobbies[i].checked = <span class="literal">true</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    兴趣爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"checkbox"</span> <span class="attr">name</span> = <span class="string">"hobby"</span> <span class="attr">value</span> = <span class="string">"cpp"</span>&gt;</span>c++</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"checkbox"</span> <span class="attr">name</span> = <span class="string">"hobby"</span> <span class="attr">value</span> = <span class="string">"java"</span>&gt;</span>java</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"checkbox"</span> <span class="attr">name</span> = <span class="string">"hobby"</span> <span class="attr">value</span> = <span class="string">"js"</span>&gt;</span>javaScript</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"checkAll()"</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"checkNo()"</span>&gt;</span>全不选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"checkReverse()"</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>getElementsByTagName(tagName)</strong></p><ul><li>按照指定标签名进行查询，并返回集合</li><li>这个集合的操作和数组一样</li><li>集合中都是dom对象</li><li>集合中元素顺序，是他们在html页面中从上到下的顺序</li></ul></li><li><p><strong>document.createElement(tagName)</strong></p><ul><li>方法：通过给定的标签名，创建一个标签对象，tagName是要创建的标签名</li></ul></li><li><p><strong>注：</strong></p><ul><li>document对象的三个查询方法，<strong>如果有id属性，优先使用getElementById方法查询</strong>，其次getElementsByName，再次为getElementsByTagName</li><li>以上三个方法，一定要在页面加载完成后，才能查询到标签对象</li></ul></li></ul><h2 id="4-8-节点的常用属性和方法"><a href="#4-8-节点的常用属性和方法" class="headerlink" title="4.8 节点的常用属性和方法"></a>4.8 节点的常用属性和方法</h2><ul><li><strong>节点就是标签对象</strong></li><li><strong>方法：</strong><ul><li>getElementsByTagName()方法，获取当前节点的指定标签名孩子节点</li><li>appendChild(oChildNode)方法，可以添加一个子节点，ochildNode是要添加的孩子节点</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 使用js代码创建html标签，并显示在页面上</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            // 标签的内容为，<span class="tag">&lt;<span class="name">div</span>&gt;</span>lalala<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> divObj = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>); <span class="comment">//在内存中</span></span></span><br><span class="line"><span class="actionscript">            divObj.innerHTML = <span class="string">"lalala"</span>; <span class="comment">//还是只在内存中</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(divObj);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>属性：</strong><ul><li>childNodes:当前节点的所有子节点</li><li>firstChild：获取当前节点的第一个子节点</li><li>lastChile：获取当前节点的最后一个子节点</li><li>parentNode：获取当前节点的父亲节点</li><li>nextSibling：获取当前节点的下一个节点</li><li>previousSibling：获取当前节点的上一个节点</li><li>classNode：用于获取或设置标签的class属性值</li><li>innerHtml：表示获取/设置起始标签和结束标签中的内容</li><li>innerText：表示获取/设置起始标签和结束标签中的文本</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-HTML和CSS基本框架&quot;&gt;&lt;a href=&quot;#一-HTML和CSS基本框架&quot; class=&quot;headerlink&quot; title=&quot;一.HTML和CSS基本框架&quot;&gt;&lt;/a&gt;一.HTML和CSS基本框架&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="后端学习" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://moersuo.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer11：旋转数组的最小数字</title>
    <link href="http://moersuo.github.io/2020/10/21/%E5%89%91%E6%8C%87offer11%EF%BC%9A%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://moersuo.github.io/2020/10/21/%E5%89%91%E6%8C%87offer11%EF%BC%9A%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</id>
    <published>2020-10-21T08:01:50.000Z</published>
    <updated>2020-10-21T09:19:05.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 <code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一个旋转，该数组的最小值为1。 </p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[2,2,2,0,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h1 id="法一：笨法子，排序"><a href="#法一：笨法子，排序" class="headerlink" title="法一：笨法子，排序"></a>法一：笨法子，排序</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ul><li>使用任意排序方法，再返回最小值</li><li>本次使用冒泡做例子</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = numbers.length - <span class="number">1</span>;j &gt;i;j--)&#123;        </span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                <span class="keyword">if</span>(numbers[j] &lt;numbers[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    temp = numbers[j];</span><br><span class="line">                    numbers[j] = numbers[j-<span class="number">1</span>];</span><br><span class="line">                    numbers[j-<span class="number">1</span>] = temp;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;          </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度："><a href="#复杂度：" class="headerlink" title="复杂度："></a>复杂度：</h2><ul><li>根据你的排序算法而定，冒泡的时间复杂度为O(n*n)</li></ul><h1 id="法二：二分法"><a href="#法二：二分法" class="headerlink" title="法二：二分法"></a>法二：二分法</h1><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><ul><li>排序数组的查找问题首先考虑使用 <strong>二分法</strong> 解决，其可将 <strong>遍历法</strong> 的 <strong>线性级别</strong> 时间复杂度降低至 <strong>对数级别</strong> 。</li><li><strong>初始化：</strong>声明left，right为数组左右两端点</li><li><strong>循环二分：</strong>设mid=left+(right-left)/2<ul><li>当numbers[mid] &lt; numbers[right]时，最小值必然不在right右侧，right = mid</li><li>当numbers[mid] &gt; numbers[right]时，最小值必然不等于mid，且不在mid左侧，left = mid+1</li><li>当numbers[mid] = numbers[right]时，暴力使用right–排除干扰项</li></ul></li><li><strong>返回值：</strong>当left=right时跳出循环，返回left即可</li></ul><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left+(right-left)/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(numbers[mid] &lt; numbers[right])&#123;</span><br><span class="line">                 right = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid] &gt; numbers[right]) &#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid] == numbers[right])&#123;</span><br><span class="line">                 right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer10-2：青蛙跳台阶 </title>
    <link href="http://moersuo.github.io/2020/10/20/%E5%89%91%E6%8C%87offer10-2%EF%BC%9A%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>http://moersuo.github.io/2020/10/20/%E5%89%91%E6%8C%87offer10-2%EF%BC%9A%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6/</id>
    <published>2020-10-20T06:12:57.000Z</published>
    <updated>2020-10-20T07:33:08.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><blockquote><p>输入：n = 7<br>输出：21</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><blockquote><p>0 &lt;= n &lt;= 100`</p></blockquote><h1 id="法一：递归"><a href="#法一：递归" class="headerlink" title="法一：递归"></a>法一：递归</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ul><li>此类求多种可能性的问题一般都有递推性质</li><li>设跳上台阶有f（n）种跳法。在所有跳法中，最后一步只存在两种可能：<strong>跳上1级或2级台阶</strong><ul><li>当为1级台阶时：剩n-1个台阶，此时共f（n-1）种跳法(一级台阶一种跳法)</li><li>当为2级台阶时：剩n-2个台阶，此时共f（n-2）种跳法（两级台阶两种跳法）</li></ul></li><li>f（n）为以上两种情况之和，即f（n）=f（n-1）+f（n-2），等同于斐波那契数列，转换为求斐波那契数列第n项的值，唯一的不同在于起始值不同。<ul><li>青蛙跳台阶：f（0）=1，f（1）=1，f（2）=2；</li><li>斐波那契：f（0）=1，f（1）=1，f（2）=2；</li></ul></li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(n)) map.put(n,(numWays(n-<span class="number">1</span>)+numWays(n-<span class="number">2</span>))%<span class="number">1000000007</span>);</span><br><span class="line">        <span class="keyword">return</span> map.get(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="法二：动态规划"><a href="#法二：动态规划" class="headerlink" title="法二：动态规划"></a>法二：动态规划</h1><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000000007</span>class Solution &#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">int</span> prev = <span class="number">1</span>,curr=<span class="number">2</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">           <span class="keyword">int</span> sum = (prev+curr)%<span class="number">1000000007</span>;</span><br><span class="line">           prev = curr;</span><br><span class="line">           curr = sum;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer10-1：斐波那契数列</title>
    <link href="http://moersuo.github.io/2020/10/18/%E5%89%91%E6%8C%87offer10-1%EF%BC%9A%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>http://moersuo.github.io/2020/10/18/%E5%89%91%E6%8C%87offer10-1%EF%BC%9A%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2020-10-18T07:01:07.000Z</published>
    <updated>2020-10-18T08:41:26.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>写一个函数，输入 <code>n</code> ，求斐波那契（Fibonacci）数列的第 <code>n</code> 项。斐波那契数列的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F(0) &#x3D; 0,   F(1) &#x3D; 1</span><br><span class="line">F(N) &#x3D; F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br></pre></td></tr></table></figure><p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p></blockquote><blockquote><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p></blockquote><blockquote><p>0 &lt;= n &lt;= 100</p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><blockquote><p>输入：n = 15<br>输出：610</p></blockquote><h1 id="法一：递归"><a href="#法一：递归" class="headerlink" title="法一：递归"></a>法一：递归</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ul><li>当看到这种定义时，我们的第一反应便是递归结构,但由于重复计算，结果很容易超时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们尝试将计算过的值使用map储存起来，每次计算时查看map，若mao中有值便直接从map中取，若map中没有便将结果存入map</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(n)) map.put(n,(fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)) % <span class="number">1000000007</span>);</span><br><span class="line">        <span class="keyword">return</span> map.get(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="法二：动态规划"><a href="#法二：动态规划" class="headerlink" title="法二：动态规划"></a>法二：动态规划</h2><ul><li><strong>状态定义：</strong> 设 dp 为一维数组，其中 dp[i] 的值代表 斐波那契数列第 i个数字 。</li><li><strong>转移方程：</strong> dp[i] = dp[i - 1] + dp[i - 2],即对应数列定义<strong>f(n) = f(n - 1) + f(n - 2)</strong></li><li><strong>初始状态：</strong> dp[0] = 0, dp[1] =1 ，初始化前两个数字</li><li><strong>返回值：</strong>dp[n] </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">            dp[i] %= <span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>优化：</strong>避免创建dp数组，当前状态只和前两个状态有关，维持两个状态即可，将空间复杂度降为O（1）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> prev = <span class="number">1</span>, curr = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = prev + curr;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><ul><li><strong>时间复杂度O(1)</strong></li><li><strong>空间复杂的O(1)</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;写一个函数，输入 &lt;code&gt;n&lt;/code&gt; ，求斐波那契（Fibonacci）数列的第 &lt;code&gt;n
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>注解</title>
    <link href="http://moersuo.github.io/2020/10/16/%E6%B3%A8%E8%A7%A3/"/>
    <id>http://moersuo.github.io/2020/10/16/%E6%B3%A8%E8%A7%A3/</id>
    <published>2020-10-16T07:00:59.000Z</published>
    <updated>2020-10-18T06:08:43.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-什么是注解"><a href="#一-什么是注解" class="headerlink" title="一. 什么是注解"></a>一. 什么是注解</h1><h2 id="1-1-作用："><a href="#1-1-作用：" class="headerlink" title="1.1 作用："></a>1.1 作用：</h2><ul><li>不是程序本身，可以对程序作出解释（等同注释）</li><li><strong>可以被其他程序（如编译器等）读取</strong></li></ul><h2 id="1-2-格式："><a href="#1-2-格式：" class="headerlink" title="1.2 格式："></a>1.2 格式：</h2><ul><li>注释是以“@注释名”在代码中存在的，还可以添加一些参数值，如：@SuppressWarnings(value=”unchecked”)</li></ul><h2 id="1-3-位置："><a href="#1-3-位置：" class="headerlink" title="1.3 位置："></a><strong>1.3 位置：</strong></h2><ul><li>可以附加在package,class,method,field等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问。</li></ul><h1 id="二-内置注解"><a href="#二-内置注解" class="headerlink" title="二.内置注解"></a>二.内置注解</h1><ul><li>@Override: 定义在java.lang.Override中，此注释只适用于修辞方法，表示一个方法声明打算重写超类中的另一个方法声明</li><li>@Deprecated: 定义在java.lang.Deprecated中，此注释可以用于修辞方法，属性，类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择（已淘汰）</li><li>@SuppressWarnings： 定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息。<ul><li>与前两个注释不同的是，此注解需要添加一个参数才能正确使用，这些参数均为已定义好的，选择使用即可。</li><li>@SuppressWarnings(“all”)</li><li>@SuppressWarnings(“unchecked”)</li><li>@SuppressWarnings(“unchecked”,”deprecation”)</li></ul></li></ul><h1 id="三-元注解"><a href="#三-元注解" class="headerlink" title="三. 元注解"></a>三. 元注解</h1><ul><li>元注解的作用就是负责注解其他注解，java定义了四个标准的meta-annotation类型，他们被用来提供对其他annotation类型作说明</li><li>这些类型和他们所支持的类在java.lang.annotation包中可以找到. @Target,@Retention,@Documented,@Inherited<ul><li><strong>@Targe</strong>t: 用于描述注解的使用范围</li><li><strong>@Retention:</strong> 表示需要在什么级别保存该注释信息，用于描述注解的生命周期（SOURCE&lt;CLASS&lt;<strong>RUNTIME</strong>）<ul><li>SOURCE：只在本编译单元的编译过程中保留，并不写入Class文件中</li><li>CLASS：在编译的过程中保留并且会写入Class文件中，但是JVM在加载类的时候不需要将其加载为运行时可见的（反射可见）的注解</li><li><strong>RUNTIME</strong>：在编译过程中保留，会写入Class文件，并且JVM加载类的时候也会将其加载为反射可见的注解</li></ul></li><li>@Document：说明该注解将被包含在javadoc中</li><li>@Inherited：说明子类可以继承父类中的该注解</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@LaAnnotation被限定只能使用在类、接口或方法上面</span></span><br><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LaAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 18</span>;</span><br><span class="line">    <span class="keyword">int</span>[] La();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-自定义注解"><a href="#四-自定义注解" class="headerlink" title="四. 自定义注解"></a>四. 自定义注解</h1><ul><li>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口</li><li>@interface用来声明一个注解，格式：public@interface注解名（定义内容）</li><li><strong>注解中定义的为注解类型元素</strong>，()不是定义方法参数的地方，也不能在括号中定义任何参数，仅仅只是一个特殊的语法；</li><li>返回值的类型就是元素的类型（返回值只能是基本类型，class，String，enum）</li><li>可以通过default来声明默认值</li><li>如果只有一个参数成员，一般参数名为value</li><li>注解元素必须要有值，我们定义注解元素时，经常用空字符串，0作为默认值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LaAnnotation &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line"><span class="keyword">int</span>[] La();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-什么是注解&quot;&gt;&lt;a href=&quot;#一-什么是注解&quot; class=&quot;headerlink&quot; title=&quot;一. 什么是注解&quot;&gt;&lt;/a&gt;一. 什么是注解&lt;/h1&gt;&lt;h2 id=&quot;1-1-作用：&quot;&gt;&lt;a href=&quot;#1-1-作用：&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://moersuo.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="编程语言" scheme="http://moersuo.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://moersuo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer09：用两个栈实现队列</title>
    <link href="http://moersuo.github.io/2020/10/16/%E5%89%91%E6%8C%87offer09%EF%BC%9A%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>http://moersuo.github.io/2020/10/16/%E5%89%91%E6%8C%87offer09%EF%BC%9A%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2020-10-16T02:02:37.000Z</published>
    <updated>2020-10-16T04:48:37.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><blockquote><p>输入：<br>[“CQueue”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[3],[],[]]<br>输出：[null,null,3,-1]</p></blockquote><blockquote><p>输入：<br>[“CQueue”,”deleteHead”,”appendTail”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[],[5],[2],[],[]]<br>输出：[null,-1,null,null,5,2]</p></blockquote><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><blockquote><p>1 &lt;= values &lt;= 10000<br>最多会对 appendTail、deleteHead 进行 10000 次调用</p></blockquote><h1 id="法一：使用双Stack模拟插入和删除操作"><a href="#法一：使用双Stack模拟插入和删除操作" class="headerlink" title="法一：使用双Stack模拟插入和删除操作"></a>法一：使用双Stack模拟插入和删除操作</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><ul><li>根据题意，首先想到的便是用两个栈分别模拟在队列尾部插入整数和队列头部删除整数</li><li>因为栈是先进后出，而队列是先进先出。所以我们可以使用将插入栈压入删除栈的办法来模拟，队列的添加删除<ul><li>在appendTail方法中，正常将元素压入栈1</li><li>在deleteHead方法中，判断删除栈是否为空<ul><li>为空，循环将插入栈的元素压入删除栈中，直到插入栈为空时停止</li><li>当删除栈不为空时，返回一个弹出的栈顶元素；或删除栈为空，但插入栈也为空，没有元素可插入，此时返回 -1.</li></ul></li></ul></li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Stack&lt;Integer&gt; stack1;</span><br><span class="line">    <span class="keyword">public</span> Stack&lt;Integer&gt; stack2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         stack1 = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 插入栈</span></span><br><span class="line">         stack2 = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">//删除栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        stack1.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack2.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.isEmpty() ? -<span class="number">1</span> : stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CQueue obj = new CQueue();</span></span><br><span class="line"><span class="comment"> * obj.appendTail(value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.deleteHead();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="法二：使用LinkedList模拟双栈操作"><a href="#法二：使用LinkedList模拟双栈操作" class="headerlink" title="法二：使用LinkedList模拟双栈操作"></a>法二：使用LinkedList模拟双栈操作</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ul><li>与双栈基本类似，区别在deleteHead思路不同</li><li>当删除栈不为空时，返回弹出的栈顶元素</li><li>当插入栈为空时，返回 -1</li><li>当插入栈不为空时，将插入栈压入删除栈，直到插入栈为空时截止</li><li>返回删除栈弹出的栈顶元素</li></ul><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; l1, l2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        l1 = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        l2 = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        l1.addLast(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l2.isEmpty()) <span class="keyword">return</span> l2.removeLast();</span><br><span class="line">        <span class="keyword">if</span>(l1.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!l1.isEmpty())</span><br><span class="line">            l2.addLast(l1.removeLast());</span><br><span class="line">        <span class="keyword">return</span> l2.removeLast();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="两者复杂度分析："><a href="#两者复杂度分析：" class="headerlink" title="两者复杂度分析："></a>两者复杂度分析：</h2><ul><li><strong>时间复杂度：</strong>O(1)，插入为O(1)操作，删除</li></ul><p>只需要完成n个元素的倒序，均摊下来为O(1)</p><ul><li><strong>空间复杂度：</strong>O(N)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead 
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>MySQL版本相关问题</title>
    <link href="http://moersuo.github.io/2020/10/14/MySQL%E7%89%88%E6%9C%AC%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://moersuo.github.io/2020/10/14/MySQL%E7%89%88%E6%9C%AC%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-14T01:04:03.000Z</published>
    <updated>2020-10-14T01:15:52.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-com-mysql-cj-jdbc-Driver与com-mysql-jdbc-Driver"><a href="#一-com-mysql-cj-jdbc-Driver与com-mysql-jdbc-Driver" class="headerlink" title="一.com.mysql.cj.jdbc.Driver与com.mysql.jdbc.Driver"></a>一.com.mysql.cj.jdbc.Driver与com.mysql.jdbc.Driver</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别:"></a>区别:</h3><p>com.mysql.cj.jdbc.Driver是mysql-connector-java 6 中的特性，相比mysql-connector-java 5 多了一个时区：serverTimezone</p><h3 id="报错方式"><a href="#报错方式" class="headerlink" title="报错方式:"></a>报错方式:</h3><blockquote><p>Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is</code>com.mysql.cj.jdbc.Driver’. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.<br>Exception in thread “main” java.sql.SQLException: The server time zone value ‘�й���׼ʱ��’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the ‘serverTimezone’ configuration property) to use a more specifc time zone value if you want to utilize time zone support.</p></blockquote><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><ul><li>将com.mysql.jdbc.driver替换为com.mysql.cj.jdbc.driver</li><li>在url配置中加入serverTimezone=GMT%2B8，如果前面有其他配置使用&amp;连接</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-com-mysql-cj-jdbc-Driver与com-mysql-jdbc-Driver&quot;&gt;&lt;a href=&quot;#一-com-mysql-cj-jdbc-Driver与com-mysql-jdbc-Driver&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="后端学习" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据库" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://moersuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="http://moersuo.github.io/2020/10/13/JDBC/"/>
    <id>http://moersuo.github.io/2020/10/13/JDBC/</id>
    <published>2020-10-13T08:34:34.000Z</published>
    <updated>2020-10-15T14:17:51.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h1><h2 id="1-什么是JDBC"><a href="#1-什么是JDBC" class="headerlink" title="1.什么是JDBC"></a>1.什么是JDBC</h2><p>JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统（DBMS）、通用的SQL数据库存取和操作的<strong>公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，使用这个类库可以以一种标准的方法、方便地访问数据库资源</p><p>JDBC为访问不同的数据库提供了一种<strong>统一</strong>的途径，为开发者屏蔽了一些细节问题。</p><h2 id="2-组成"><a href="#2-组成" class="headerlink" title="2.组成"></a>2.组成</h2><ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul><h2 id="3-JDBC编写步骤"><a href="#3-JDBC编写步骤" class="headerlink" title="3.JDBC编写步骤"></a>3.JDBC编写步骤</h2><ul><li>加载与注册驱动</li><li>URl</li><li>获取连接</li><li>执行增删改查</li><li>释放资源</li></ul><h1 id="二-初识JDBC"><a href="#二-初识JDBC" class="headerlink" title="二.初识JDBC"></a>二.初识JDBC</h1><h2 id="案例1-1使用statement的增删改"><a href="#案例1-1使用statement的增删改" class="headerlink" title="案例1.1使用statement的增删改"></a>案例1.1使用statement的增删改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mysql;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConnection1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//DriverManager.registerDriver(new Driver()); 注册驱动，不推荐使用</span></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost/数据库名?serverTimezone=GMT%2B8"</span>,<span class="string">"账户名"</span>,<span class="string">"密码"</span>);</span><br><span class="line">        System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">        <span class="comment">//3.执行增删改查</span></span><br><span class="line">        <span class="comment">//3.1编写sql语句</span></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">  <span class="comment">//    String sql = "delete from beauty where id = 9";</span></span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">  <span class="comment">//    String sql = "update beauty set name = 'lalala' where id = 7";</span></span><br><span class="line">        <span class="comment">//增加</span></span><br><span class="line">        String sql = <span class="string">"insert into beauty values(null,'lalala','女','1999-1-1','110',null,'3')"</span>;</span><br><span class="line">        <span class="comment">//3.2 获取执行sql语句的命令对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//3.3使用sql对象执行sql语句</span></span><br><span class="line">        <span class="keyword">int</span> update = statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//3.4处理执行结果</span></span><br><span class="line">        System.out.println(update&gt;<span class="number">0</span>?<span class="string">"success"</span>:<span class="string">"failure"</span>);</span><br><span class="line">        <span class="comment">//4.关闭连接</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例1-2使用statement的查询"><a href="#案例1-2使用statement的查询" class="headerlink" title="案例1.2使用statement的查询"></a>案例1.2使用statement的查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mysql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConnection2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>); <span class="comment">//固定写法</span></span><br><span class="line">        <span class="comment">//2.用户信息和url</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8&amp;useSSl=true&amp;serverTimezone=GMT%2B8"</span>;</span><br><span class="line">        String username = <span class="string">"账户名"</span>;</span><br><span class="line">        String password = <span class="string">"密码"</span>;</span><br><span class="line">        <span class="comment">//3.获取与数据库的连接,Connection代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url,username,password);</span><br><span class="line">        <span class="comment">//4.执行增删改查</span></span><br><span class="line">        <span class="comment">//4.1获取执行sql的命令对象statement</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">////4.2执行sql语句</span></span><br><span class="line">        String sql = <span class="string">"Select * from beauty"</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql); <span class="comment">//返回的结果集</span></span><br><span class="line">        <span class="comment">//statement.executeQuery(sql);//执行查询语句</span></span><br><span class="line"><span class="comment">//statement.executeUpdate(sql);//执行增删改语法，返回受影响行数</span></span><br><span class="line"><span class="comment">//statement.execute(sql);//执行任何sql语句</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">"id="</span>+resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"name="</span>+resultSet.getObject(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"sex="</span>+resultSet.getObject(<span class="string">"sex"</span>));</span><br><span class="line">            System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><h3 id="1-useUnicode-true-amp-characterEncoding-utf8作用："><a href="#1-useUnicode-true-amp-characterEncoding-utf8作用：" class="headerlink" title="1.useUnicode=true&amp;characterEncoding=utf8作用："></a>1.useUnicode=true&amp;characterEncoding=utf8作用：</h3><p>指定字符的编码，解码格。例如mysql数据库用的是gbk编码，而项目数据库用的是utf-8编码</p><h3 id="2-useSSl-true或false"><a href="#2-useSSl-true或false" class="headerlink" title="2.useSSl=true或false"></a>2.useSSl=true或false</h3><p>MySQL在高版本需要指明是否进行SSL连接。</p><p>SSL协议提供服务主要：                </p><ul><li><p>认证用户服务器，确保数据发送到正确的服务器； 　　 .      </p></li><li><p>加密数据，防止数据传输途中被窃取使用；       </p></li><li><p>维护数据完整性，验证数据在传输过程中是否丢失；</p></li></ul><h3 id="3-serverTimezone-GMT-2B8"><a href="#3-serverTimezone-GMT-2B8" class="headerlink" title="3.serverTimezone=GMT%2B8"></a>3.serverTimezone=GMT%2B8</h3><p>mysql-connector-java 6 中的特性，相比mysql-connector-java 5 多了一个时区：serverTimezone</p><p>serverTimezone=GMT%2B8  //指定时区为北京时间东八区</p><h3 id="4-为什么不使用注册驱动"><a href="#4-为什么不使用注册驱动" class="headerlink" title="4.为什么不使用注册驱动"></a>4.为什么不使用注册驱动</h3><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类都包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。</p><p><strong>注：</strong>使用DriverManager.registerDriver(com.mysql.cj.jdbc.Driver)来注册驱动</p><h2 id="JDBC常见API"><a href="#JDBC常见API" class="headerlink" title="JDBC常见API"></a>JDBC常见API</h2><p>JDBC API是一系列的接口，它统一和规范了应用程序与数据库的连接、执行SQL语句，并到得到返回结果等各类操作。声明在java.sql与javax.sql包中。</p><h3 id="DriverManager-驱动管理类"><a href="#DriverManager-驱动管理类" class="headerlink" title="DriverManager 驱动管理类"></a>DriverManager 驱动管理类</h3><p>​    <strong>registDriver(Driver对象):注册驱动</strong>（不推荐使用）</p><p>​    <strong>getConnection(url,user,pwd):获取连接</strong></p><h3 id="Connection-连接对象接口"><a href="#Connection-连接对象接口" class="headerlink" title="Connection 连接对象接口"></a><strong>Connection 连接对象接口</strong></h3><p>​    <strong>createStatement():生产命令对象</strong>        </p><p>​    <strong>prepareStatement(sql):生产预编译命令对象</strong></p><h3 id="Statement-命令对象接口"><a href="#Statement-命令对象接口" class="headerlink" title="Statement 命令对象接口"></a>Statement 命令对象接口</h3><p>​    <strong>executeUpdate(sql):执行增删改语句，返回受影响的行数</strong></p><p>​    <strong>executeQuery(sql):执行查询语句，返回结果集</strong></p><p>​    <strong>execute(sql):执行任意sql语句，返回boolean</strong></p><h3 id="PrepareStatement预编译命令对象接口"><a href="#PrepareStatement预编译命令对象接口" class="headerlink" title="PrepareStatement预编译命令对象接口"></a>PrepareStatement预编译命令对象接口</h3><p>​    <strong>executeUpdate(sql):执行增删改语句，返回受影响的行数</strong></p><p>​    <strong>executeQuery(sql):执行查询语句，返回结果集</strong></p><p>​    <strong>execute(sql):执行任意sql语句，返回boolean</strong></p><p>​    <strong>setXX(占位符索引，占位符的值):设置对应索引的占位符的值，类型为Object类型</strong></p><h3 id="ResultSet结果对象接口"><a href="#ResultSet结果对象接口" class="headerlink" title="ResultSet结果对象接口"></a>ResultSet结果对象接口</h3><p>​    <strong>next():下移一行，返回当前行是否有值</strong></p><p>​    <strong>previous():上移一行，返回当前是否有值</strong></p><p>​    <strong>getXX(列索引||列名||别名):返回对应列的值，接受类型为XX</strong></p><p>​    <strong>getObject(列索引||列名||别名):返回对应列的值，接受类型为Object</strong></p><h1 id="三-获取连接（包含JDBC编写的前三步）"><a href="#三-获取连接（包含JDBC编写的前三步）" class="headerlink" title="三.获取连接（包含JDBC编写的前三步）"></a>三.获取连接（包含JDBC编写的前三步）</h1><h3 id="1-加载驱动"><a href="#1-加载驱动" class="headerlink" title="1.加载驱动"></a>1.加载驱动</h3><p>加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><p><strong>Class.forName(“com.mysql.cj.jdbc.Driver”);</strong></p><p><strong>注：</strong></p><ul><li><p><strong>java.sql.Driver</strong> 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类<strong>(java.sql.DriverManager)</strong>去调用这些Driver实现。</p><p>eg:  Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong>  ，mySql的驱动： <strong>com.mysql.cj.jdbc.Driver</strong></p></li></ul><h3 id="2-URL"><a href="#2-URL" class="headerlink" title="2.URL"></a>2.URL</h3><ul><li><p>JDBC URL 向驱动程序提供个一个识别数据源的方法，根据URL先前载入的驱动程序便可以找到对应的数据源并且实现数据库连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。</p><ul><li><strong>jdbc:子协议:名称</strong>  ，<strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>名称</strong>：一种标识数据库的方法。名称可以依不同的子协议而变化，用名称的目的是为了定位数据库提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)，<strong>端口号</strong>，<strong>数据库名</strong></li></ul></li><li><p>常见MySQL连接URL编写方式：</p><ul><li>jdbc:mysql://主机名称:mysql:服务端口号/数据库名称?参数=值&amp;参数=值</li><li>jdbc:mysql://localhost:3306/lalala?useUnicode=true&amp;characterEncoding=utf8</li><li>jdbc:mysql://localhost:3306/lalala?user=用户名&amp;password=密码</li><li>jdbc:mysql://localhost:3306/lalala</li></ul></li><li><p>用户名和密码：</p><ul><li>user,password可以用“属性名=属性值”方式告诉数据库    eg：String username = “账户名”  String password = “密码”;</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul></li></ul><h3 id="3-连接方式："><a href="#3-连接方式：" class="headerlink" title="3.连接方式："></a>3.连接方式：</h3><h4 id="连接方式1"><a href="#连接方式1" class="headerlink" title="连接方式1"></a>连接方式1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">           String user = <span class="string">"root"</span>;</span><br><span class="line">           String password = <span class="string">"123456"</span>;</span><br><span class="line">           String driverClass= <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">           <span class="comment">//2.加载驱动 </span></span><br><span class="line">           Class.forName(driverName);    </span><br><span class="line">           <span class="comment">//3.获取连接</span></span><br><span class="line">           Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(connection);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="连接方式2"><a href="#连接方式2" class="headerlink" title="连接方式2"></a>连接方式2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testConnection2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//1.加载配置文件</span></span><br><span class="line">       InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream("jdbc.properties");</span><br><span class="line">       Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">       pros.load(is);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//2.读取配置信息</span></span><br><span class="line">       String user = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">       String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">       String url = pros.getProperty(<span class="string">"url"</span>);</span><br><span class="line">       String driverClass = pros.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.加载驱动</span></span><br><span class="line">       Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.获取连接</span></span><br><span class="line">       Connection connection =DriverManager.getConnection(url,user,password);</span><br><span class="line">       System.out.println(connection);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>配置文件在工程的src目录下建立：<strong>jdbc.properties</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user&#x3D;root</span><br><span class="line">password&#x3D;123456</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;lalala</span><br><span class="line">driverClass&#x3D;com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><h4 id="为什么使用配置文件："><a href="#为什么使用配置文件：" class="headerlink" title="为什么使用配置文件："></a>为什么使用配置文件：</h4><ul><li>实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码</li><li>如果修改了配置信息，省去重新编译的过程。</li></ul><h1 id="四-使用PreparedStatement实现CRUD操作"><a href="#四-使用PreparedStatement实现CRUD操作" class="headerlink" title="四.使用PreparedStatement实现CRUD操作"></a>四.使用PreparedStatement实现CRUD操作</h1><h2 id="4-1-操作和访问数据库"><a href="#4-1-操作和访问数据库" class="headerlink" title="4.1 操作和访问数据库"></a>4.1 操作和访问数据库</h2><ul><li>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。一个数据库连接就是一个Socket连接。</li><li>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：<ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。</li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul></li></ul><h2 id="4-2-使用Statement操作数据表"><a href="#4-2-使用Statement操作数据表" class="headerlink" title="4.2 使用Statement操作数据表"></a>4.2 使用Statement操作数据表</h2><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><ul><li>int update = statement.executeUpdate(sql);     执行更新操作INSERT、UPDATE、DELETE</li><li>ResultSet resultSet = statement.executeQuery(sql);    执行查询操作SELECT</li></ul></li><li><p>弊端：</p><ul><li><p>存在拼串操作，繁琐  <strong>eg:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT user,password FROM user_table WHERE USER = '"</span> + userName + <span class="string">"' AND PASSWORD = '"</span> + password</span><br></pre></td></tr></table></figure></li><li><p>存在SQL注入问题      </p><p><strong>解决方法：</strong>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了</p></li></ul></li></ul><h2 id="4-3-JDBC连接的工具类"><a href="#4-3-JDBC连接的工具类" class="headerlink" title="4.3 JDBC连接的工具类"></a>4.3 JDBC连接的工具类</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>获取连接</li><li>释放资源</li></ul><h3 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtile</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取可用的连接对象</span></span><br><span class="line">    <span class="keyword">static</span> String user</span><br><span class="line">    <span class="keyword">static</span> String password</span><br><span class="line">    <span class="keyword">static</span> String url</span><br><span class="line">    <span class="keyword">static</span> String driverClass</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Properties info = <span class="keyword">new</span> Properties;</span><br><span class="line">        info.load(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\jdbc.properties"</span>));</span><br><span class="line">        </span><br><span class="line">        user = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">        password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">        url = pros.getProperty(<span class="string">"url"</span>);</span><br><span class="line">        driverClass = pros.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line">                </span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet set,Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(set != <span class="keyword">null</span>)&#123;</span><br><span class="line">            set.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(statament != <span class="keyword">null</span>)&#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-使用PreparedStatement"><a href="#4-4-使用PreparedStatement" class="headerlink" title="4.4 使用PreparedStatement"></a>4.4 使用PreparedStatement</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><ul><li>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</li><li>可以通过调用 Connection 对象的 preparedStatement(String sql) 方法获取 PreparedStatement 对象</li><li>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</li></ul><h3 id="相对Statement的优势："><a href="#相对Statement的优势：" class="headerlink" title="相对Statement的优势："></a>相对Statement的优势：</h3><ul><li>代码的可读性和可维护性</li><li>更好的性能，预编译语句可被重复调用，储存在缓存中，节省反复编译的时间。</li><li>防止 SQL 注入 </li></ul><h3 id="实现增、删、改操作"><a href="#实现增、删、改操作" class="headerlink" title="实现增、删、改操作"></a>实现增、删、改操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql,Object ... args)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> update = statement.executeUpdate();</span><br><span class="line">            <span class="keyword">return</span> update;</span><br><span class="line"><span class="comment">//4.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">JDBCUtils.close(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现查询"><a href="#实现查询" class="headerlink" title="实现查询"></a>实现查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的针对于不同表的查询:返回一个对象 </span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Connection conn,Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.预编译sql语句，得到PreparedStatement对象</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行executeQuery(),得到结果集：ResultSet</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.得到结果集的元数据：ResultSetMetaData</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">T t = clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;<span class="comment">// 遍历每一个列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line">Object columnVal = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取列的别名:列的别名，使用类的属性名充当</span></span><br><span class="line">String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 6.2使用反射，给对象的相应属性赋值</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 7.关闭资源</span></span><br><span class="line">JDBCUtils.close(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-ResultSet与ResultSetMetaData"><a href="#4-5-ResultSet与ResultSetMetaData" class="headerlink" title="4.5 ResultSet与ResultSetMetaData"></a>4.5 ResultSet与ResultSetMetaData</h2><h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><ul><li>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</li><li>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</li><li>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</li><li>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</li><li>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。<ul><li>例如: getInt(1), getString(“name”)</li><li>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始</li></ul></li></ul><h3 id="ResultSetMetaData"><a href="#ResultSetMetaData" class="headerlink" title="ResultSetMetaData"></a>ResultSetMetaData</h3><ul><li>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</li><li>ResultSetMetaData meta = rs.getMetaData();<ul><li><strong>getColumnName</strong>(int column)：获取指定列的名称</li><li><strong>getColumnLabel</strong>(int column)：获取指定列的别名</li><li><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </li><li><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </li></ul></li></ul><h2 id="4-6-释放资源："><a href="#4-6-释放资源：" class="headerlink" title="4.6 释放资源："></a>4.6 释放资源：</h2><ul><li>释放ResultSet, Statement,Connection</li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="ORM思想"><a href="#ORM思想" class="headerlink" title="ORM思想"></a>ORM思想</h3><p>(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul><h1 id="五-JDBC事务处理："><a href="#五-JDBC事务处理：" class="headerlink" title="五.JDBC事务处理："></a>五.JDBC事务处理：</h1><ul><li>数据一旦提交，则不可回滚</li><li>数据提交条件：<ul><li><strong>当一个连接对象被创建时，默认为自动提交事务：</strong>每次执行一个SQL语句时，如果执行成功，就会自动向数据库提交</li><li><strong>关闭数据库连接时，数据就会自动提交：</strong>同一个事务的多个操作必须在同一连接下</li></ul></li><li>JDBC程序中为了让多个SQL语句作为一个事务执行采取的方法：<ul><li>调用Connection对象的setAutoCommit(false); 来取消自动提交事务</li><li>在所有SQl语句都成功执行后，调用Commit();方法提交事务</li><li>在出现异常时，调用rollback();方法回滚事务</li></ul></li></ul><p><strong>注：</strong>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p><h2 id="案例：用户AA向用户BB转账100"><a href="#案例：用户AA向用户BB转账100" class="headerlink" title="案例：用户AA向用户BB转账100"></a>案例：用户AA向用户BB转账100</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBCTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 2.开启事务</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 3.进行数据库操作</span></span><br><span class="line">String sql1 = <span class="string">"update user_table set balance = balance - 100 where user = ?"</span>;</span><br><span class="line">update(conn, sql1, <span class="string">"AA"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟网络异常</span></span><br><span class="line"><span class="comment">//System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line">String sql2 = <span class="string">"update user_table set balance = balance + 100 where user = ?"</span>;</span><br><span class="line">update(conn, sql2, <span class="string">"BB"</span>);</span><br><span class="line"><span class="comment">// 4.若没有异常，则提交事务</span></span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">// 5.若有异常，则回滚事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//6.恢复每次DML操作的自动提交功能</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//7.关闭连接</span></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>, <span class="keyword">null</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，对数据库操作的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用事务以后的通用的增删改操作（version 2.0）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn ,String sql, Object... args)</span> </span>&#123;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 2.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 4.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(<span class="keyword">null</span>, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六-批量插入"><a href="#六-批量插入" class="headerlink" title="六.批量插入"></a>六.批量插入</h1><h2 id="需要批量插入的情景"><a href="#需要批量插入的情景" class="headerlink" title="需要批量插入的情景"></a>需要批量插入的情景</h2><ul><li>一个SQL语句的批量传参</li><li>多条SQL语句的批量处理</li></ul><h2 id="JDBC中批量插入方法"><a href="#JDBC中批量插入方法" class="headerlink" title="JDBC中批量插入方法"></a>JDBC中批量插入方法</h2><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span></span><br><span class="line"><span class="comment">*     ?rewriteBatchedStatements=true 写在配置文件的url后面 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置为不自动提交数据</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into goods(name)values(?)"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"name_"</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"花费的时间为："</span> + (end - start));</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h1 id="七-数据库连接池"><a href="#七-数据库连接池" class="headerlink" title="七.数据库连接池"></a>七.数据库连接池</h1><h2 id="7-1-JDBC数据库连接池的意义"><a href="#7-1-JDBC数据库连接池的意义" class="headerlink" title="7.1 JDBC数据库连接池的意义"></a>7.1 JDBC数据库连接池的意义</h2><ul><li>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：<ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li>这种模式开发，存在的问题:<ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。 </li></ul></li></ul><h2 id="7-2-数据库连接池技术"><a href="#7-2-数据库连接池技术" class="headerlink" title="7.2 数据库连接池技术"></a>7.2 数据库连接池技术</h2><ul><li><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去</li><li><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</li><li>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</li><li><strong>优点：</strong><ul><li><strong>资源重用：</strong>避免频繁创建释放，减少系统消耗，提升稳定性。</li><li><strong>更快的系统响应：</strong>由于数据库连接池在初始化时就创建了一些数据库连接在池中备用，因此在需要连接时，减少了响应时间。</li><li><strong>更细腻的资源分配：</strong>在数据库连接池中可设置某一应用最大数据库连接数限制，避免独占资源。</li><li><strong>避免数据库连接泄露：</strong>可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</li></ul></li></ul><h2 id="7-3-多种开源的数据库连接池"><a href="#7-3-多种开源的数据库连接池" class="headerlink" title="7.3 多种开源的数据库连接池"></a>7.3 多种开源的数据库连接池</h2><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li><strong>注：</strong><ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要<strong>一个数据源即可</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它<strong>仅仅把数据库连接释放，归还给了数据库连接池。</strong></li></ul></li></ul><h3 id="Druid案例："><a href="#Druid案例：" class="headerlink" title="Druid案例："></a>Druid案例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Properties pro = new Properties(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream("druid.properties"));</span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【druid.properties】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?rewriteBatchedStatements&#x3D;true</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;123456</span><br><span class="line">driverClass&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">initialSize&#x3D;10</span><br><span class="line">maxActive&#x3D;20</span><br><span class="line">maxWait&#x3D;1000</span><br><span class="line">filters&#x3D;wall</span><br></pre></td></tr></table></figure><h1 id="八-Apache-DBUtils实现CRUD操作"><a href="#八-Apache-DBUtils实现CRUD操作" class="headerlink" title="八.Apache-DBUtils实现CRUD操作"></a>八.Apache-DBUtils实现CRUD操作</h1><h2 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1 简介"></a>8.1 简介</h2><ul><li><strong>commons-dbutils</strong> 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</li><li><strong>API</strong>:<ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>org.apache.commons.dbutils.DbUtils   </li></ul></li></ul><h2 id="8-2-DbUtils"><a href="#8-2-DbUtils" class="headerlink" title="8.2 DbUtils"></a>8.2 DbUtils</h2><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li></ul></li></ul><h2 id="8-3-QueryRunner类"><a href="#8-3-QueryRunner类" class="headerlink" title="8.3 QueryRunner类"></a>8.3 QueryRunner类</h2><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><p><strong>更新</strong>：public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</p></li><li><p><strong>插入：</strong>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句</p></li><li><p><strong>批处理</strong>：</p><ul><li><p>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</p></li><li><p>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</p></li></ul></li><li><p><strong>查询</strong>：public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</p></li></ul></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试添加</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">String sql = <span class="string">"insert into customers(name,email,birth)values(?,?,?)"</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql, <span class="string">"何成飞"</span>, <span class="string">"he@qq.com"</span>, <span class="string">"1992-09-08"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"添加了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">String sql = <span class="string">"delete from customers where id &lt; ?"</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"删除了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-4ResultSetHandler接口及实现类"><a href="#8-4ResultSetHandler接口及实现类" class="headerlink" title="8.4ResultSetHandler接口及实现类"></a>8.4ResultSetHandler接口及实现类</h2><ul><li>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</li><li>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</li><li>接口的主要实现类：<ul><li><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li><li><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li><li><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li><li><strong>ScalarHandler：</strong>查询单个值对象</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li></ul></li><li><strong>测试</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email,birth from customers where id = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询多条记录构成的集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanListHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryList</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email,birth from customers where id &lt; ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanListHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email,birth from customers where id = ?"</span>;</span><br><span class="line"></span><br><span class="line">ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> ResultSetHandler&lt;Customer&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"handle"</span>);</span><br><span class="line"><span class="comment">//return new Customer(1,"Tom","tom@126.com",new Date(123323432L));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">String email = rs.getString(<span class="string">"email"</span>);</span><br><span class="line">Date birth = rs.getDate(<span class="string">"birth"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span></span><br><span class="line"><span class="comment"> * 使用ScalarHandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试一：</span></span><br><span class="line"><span class="comment">//String sql = "select count(*) from customers where id &lt; ?";</span></span><br><span class="line"><span class="comment">//ScalarHandler handler = new ScalarHandler();</span></span><br><span class="line"><span class="comment">//long count = (long) runner.query(conn, sql, handler, 20);</span></span><br><span class="line"><span class="comment">//System.out.println(count);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试二：</span></span><br><span class="line">String sql = <span class="string">"select max(birth) from customers"</span>;</span><br><span class="line">ScalarHandler handler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">Date birth = (Date) runner.query(conn, sql, handler);</span><br><span class="line">System.out.println(birth);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateWithTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取连接的操作（</span></span><br><span class="line"><span class="comment">//① 手写的连接：JDBCUtils.getConnection();</span></span><br><span class="line"><span class="comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span></span><br><span class="line"><span class="comment">//2.对数据表进行一系列CRUD操作</span></span><br><span class="line"><span class="comment">//① 使用PreparedStatement实现通用的增删改、查询操作</span></span><br><span class="line"><span class="comment">//增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//回滚数据</span></span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//3.关闭连接等操作</span></span><br><span class="line"><span class="comment">//① JDBCUtils.closeResource();</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九-DAO及相关实现类"><a href="#九-DAO及相关实现类" class="headerlink" title="九.DAO及相关实现类"></a>九.DAO及相关实现类</h1><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li></ul><h2 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HanYanBing</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"><span class="comment">// 定义一个变量来接收泛型的类型</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取子类的类型</span></span><br><span class="line">Class clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line"><span class="comment">// 获取父类的类型</span></span><br><span class="line"><span class="comment">// getGenericSuperclass()用来获取当前类的父类的类型</span></span><br><span class="line"><span class="comment">// ParameterizedType表示的是带泛型的类型</span></span><br><span class="line">ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass();</span><br><span class="line"><span class="comment">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span></span><br><span class="line"><span class="comment">// 这个方法会返回一个Type的数组</span></span><br><span class="line">Type[] types = parameterizedType.getActualTypeArguments();</span><br><span class="line"><span class="comment">// 获取具体的泛型的类型·</span></span><br><span class="line"><span class="keyword">this</span>.type = (Class&lt;T&gt;) types[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的增删改操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">count = queryRunner.update(conn, sql, params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getBean</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">t = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanHandler&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getBeanList</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanListHandler&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">Object count = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 调用queryRunner的query方法获取一个单一的值</span></span><br><span class="line">count = queryRunner.query(conn, sql, <span class="keyword">new</span> ScalarHandler&lt;&gt;(), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中查询出所有的记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中根据图书的id删除一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中查询出一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中更新一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页和价格范围的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> User 数据库中有记录 null 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 数据库中有记录 false 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入User对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BookDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中得到一个List的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books"</span>;</span><br><span class="line">beanList = getBeanList(conn,sql);</span><br><span class="line"><span class="keyword">return</span> beanList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"DELETE FROM books WHERE id = ?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用增删改的方法</span></span><br><span class="line">update(conn,sql, bookId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">Book book = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books where id = ?"</span>;</span><br><span class="line">book = getBean(conn,sql, bookId);</span><br><span class="line"><span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">"select count(*) from books"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">"select count(*) from books where price between ? and ?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql,minPrice,maxPrice);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">【Page.java】<span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,username,password,email from users where username = ? and password = ?"</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername(), user.getPassword());</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,username,password,email from users where username = ?"</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername());</span><br><span class="line"><span class="keyword">return</span> bean != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">//写sql语句</span></span><br><span class="line">String sql = <span class="string">"insert into users(username,password,email) values(?,?,?)"</span>;</span><br><span class="line"><span class="comment">//调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页码类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; list; <span class="comment">// 每页查到的记录存放的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">4</span>; <span class="comment">// 每页显示的记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageNo; <span class="comment">// 当前页</span></span><br><span class="line"><span class="comment">//private int totalPageNo; // 总页数，通过计算得到</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalRecord; <span class="comment">// 总记录数，通过查询数据库得到</span></span><br></pre></td></tr></table></figure><h2 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一.概述&quot;&gt;&lt;/a&gt;一.概述&lt;/h1&gt;&lt;h2 id=&quot;1-什么是JDBC&quot;&gt;&lt;a href=&quot;#1-什么是JDBC&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="后端学习" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据库" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://moersuo.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>生产者消费者模型</title>
    <link href="http://moersuo.github.io/2020/10/08/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
    <id>http://moersuo.github.io/2020/10/08/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-10-08T09:31:50.000Z</published>
    <updated>2020-10-12T00:41:30.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p>生产者消费者消费者模型是一种并发编程中的常见问题，基于等待/通知机制。其基本思想是有一块缓冲区作为仓库，生产者将产品放入枪库，消费者从仓库中取出产品。这个仓库就是一个阻塞队列，生产者生产的产品不直接给消费者消费而是给阻塞队列。这个阻塞队列目的是解决生产者消费者的强耦合。</p><h2 id="解决的实际问题："><a href="#解决的实际问题：" class="headerlink" title="解决的实际问题："></a>解决的实际问题：</h2><ul><li><p>生产与消费的速度不匹配</p></li><li><p>软件开发过程中解耦，使生产者与消费者间的强耦合变成生产者和缓冲区，消费者与缓存区间的弱耦合</p></li></ul><h2 id="需要注意的点："><a href="#需要注意的点：" class="headerlink" title="需要注意的点："></a>需要注意的点：</h2><ul><li>生产者生产的时候消费者不能消费</li><li>消费者消费的时候生产者不能生产</li><li>仓库即缓冲区为空时不能消费</li><li>缓冲区满时生产者不能生产</li></ul><h1 id="案例一：缓冲区法"><a href="#案例一：缓冲区法" class="headerlink" title="案例一：缓冲区法"></a>案例一：缓冲区法</h1><ul><li>建立继承自Thread的生产者类和消费者类，和只有产品编号字段及构造方法的产品类</li><li>构建缓冲区：<ul><li>构建一个容器和它的容器计数器</li><li>构建加锁的生产者生产的push方法</li><li>构建加锁的消费者消费的pop方法</li></ul></li><li>重写生产者及消费者的run方法，加入他们的构造方法</li><li>构建main方法，构建一个缓冲区类的container实例对象，并开启生产者和消费者线程</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread.prodeuctor_consumer;</span><br><span class="line"><span class="comment">// 测试生产者消费者模型--&gt;利用缓冲区解决：管程法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者，消费者，产品，缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">        <span class="keyword">new</span> Productor(container).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            container.push(<span class="keyword">new</span> Food(i));</span><br><span class="line">            System.out.println(<span class="string">"生产了"</span>+i+<span class="string">"号食物"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"消费了--&gt;"</span>+container.pop().id+<span class="string">"号食物"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">//产品编号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Food</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Food[] foods = <span class="keyword">new</span> Food[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Food food)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果容器满了，就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">while</span>(count == foods.length)&#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果容器未满，我们需要加入产品</span></span><br><span class="line">        foods[count] = food;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//可以通知消费者消费了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Food <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断能否消费</span></span><br><span class="line">        <span class="keyword">while</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待生产者生产，消费者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果可以消费</span></span><br><span class="line">        count--;</span><br><span class="line">        Food food = foods[count];</span><br><span class="line">        <span class="comment">//吃完了，通知生产者生产</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> food;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例二：信号灯法，标志位解决"><a href="#案例二：信号灯法，标志位解决" class="headerlink" title="案例二：信号灯法，标志位解决"></a>案例二：信号灯法，标志位解决</h1><ul><li>构建生产者，消费者，产品类</li><li>构建产品类的字段节目，并建立标志位</li><li>构建演出与观看方法，标志位为真时表演–观看线程沉睡，为假时观看–表演线程沉睡，演出或观看结束时唤醒其他线程</li><li>构建测试类</li></ul><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread.prodeuctor_consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试生产者，消费者问题2：信号灯法，标志位解决</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPc2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tv tv = <span class="keyword">new</span> Tv();</span><br><span class="line">        <span class="keyword">new</span> actor(tv).start();</span><br><span class="line">        <span class="keyword">new</span> audience(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者--&gt;演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">actor</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">actor</span><span class="params">(Tv tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"风骚律师"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"广告"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者--&gt;观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">audience</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">audience</span><span class="params">(Tv tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品--&gt;节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tv</span></span>&#123;</span><br><span class="line">    <span class="comment">//演员录制节目，观众等待 T</span></span><br><span class="line">    <span class="comment">//观众观看，演员等待    F</span></span><br><span class="line">    String program; <span class="comment">//表演的节目</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String program)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"演员表演了："</span>+program);</span><br><span class="line">        <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();<span class="comment">//通知唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.program = program;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"观众观看了："</span>+program);</span><br><span class="line">        <span class="comment">//通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h1&gt;&lt;p&gt;生产者消费者消费者模型是一种并发编程中的常见问题，基于等待/通知机制。其基本思想是有一块缓冲区作为仓库，生产者将产品放入枪库，消费者
      
    
    </summary>
    
    
      <category term="后端学习" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="多线程" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://moersuo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer06：从头到尾打印链表</title>
    <link href="http://moersuo.github.io/2020/10/05/%E5%89%91%E6%8C%87offer06%EF%BC%9A%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>http://moersuo.github.io/2020/10/05/%E5%89%91%E6%8C%87offer06%EF%BC%9A%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</id>
    <published>2020-10-05T08:24:53.000Z</published>
    <updated>2020-10-05T09:10:38.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h2><blockquote><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><blockquote><p>输入：head = [1,3,2]<br>输出：[2,3,1]</p></blockquote><h2 id="限制："><a href="#限制：" class="headerlink" title="限制："></a>限制：</h2><blockquote><p>0 &lt;= 链表长度 &lt;= 10000</p></blockquote><hr><h1 id="法一：使用栈存储"><a href="#法一：使用栈存储" class="headerlink" title="法一：使用栈存储"></a>法一：使用栈存储</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>当我们看到从尾到头反向输出时，便应该想到这是栈的的典型特征。根据这一特点，我们将使用栈将链表元素顺序倒置。从链表的第一个值开始，依次将每个值压入栈内，然后依次弹出栈内的元素并存储到数组中。</p><ul><li>创建一个栈，用于储存链表每个节点的值</li><li>创建一个指针，指向链表头结点</li><li>当指针指向非空元素时，重复以下操作：<ul><li>将指针指向的节点的值压入栈内</li><li>将指针移到当前节点的下一个节点</li></ul></li><li>获得栈的大小size，创建一个大小为size的数组array</li><li>建立一个size次的for循环，每次从栈内弹出一个节点值，存入size中</li><li>返回array</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(temp.val);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = stack.size();</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            array[i] = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><ul><li>时间复杂度：O(n)。正向遍历一遍链表，然后从栈弹出全部节点，等于又反向遍历一遍链表。</li><li>空间复杂度：O(n)。额外使用一个栈存储链表中的每个节点。</li></ul><h1 id="法一-二-使用ArrayList存储"><a href="#法一-二-使用ArrayList存储" class="headerlink" title="法一.二:使用ArrayList存储"></a>法一.二:使用ArrayList存储</h1><p>思路相同，只不过容器换为ArrayList</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            array[i] = list.get(size - i -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="法二：递归"><a href="#法二：递归" class="headerlink" title="法二：递归"></a>法二：递归</h1><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><ul><li><strong>递推阶段：</strong> 每次传入 <code>head.next</code> ，以 <code>head == null</code>（即走过链表尾部节点）为递归终止条件，此时直接返回。</li><li><strong>回溯阶段：</strong> 层层回溯时，将当前节点值加入列表，即<code>tmp.add(head.val)</code>。</li><li>最终，将列表 <code>tmp</code> 转化为数组 <code>res</code> ，并返回即可。</li></ul><h2 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        recur(head);</span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[temp.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.size();i++)&#123;</span><br><span class="line">            array[i] = temp.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recur</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        recur(head.next);</span><br><span class="line">        temp.add(head.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析：-1"><a href="#复杂度分析：-1" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><ul><li><strong>时间复杂度 O(N)：</strong> 遍历链表，递归 N次。</li><li><strong>时间复杂度 O(N)：</strong> 遍历链表，递归 N次。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目:&quot;&gt;&lt;/a&gt;题目:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode题解09 回文数</title>
    <link href="http://moersuo.github.io/2020/10/04/Leetcode%E9%A2%98%E8%A7%A309-%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <id>http://moersuo.github.io/2020/10/04/Leetcode%E9%A2%98%E8%A7%A309-%E5%9B%9E%E6%96%87%E6%95%B0/</id>
    <published>2020-10-04T03:36:19.000Z</published>
    <updated>2020-10-04T06:40:37.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leetcode题解09-：回文数"><a href="#Leetcode题解09-：回文数" class="headerlink" title="Leetcode题解09 ：回文数"></a>Leetcode题解09 ：回文数</h2><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><blockquote><p>输入: 121<br>输出: true</p></blockquote><blockquote><p>输入: -121<br>输出: false<br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p></blockquote><blockquote><p>输入: 10<br>输出: false<br>解释: 从右向左读, 为 01 。因此它不是一个回文数。</p></blockquote><h2 id="官方法一：反转一半数字"><a href="#官方法一：反转一半数字" class="headerlink" title="官方法一：反转一半数字"></a>官方法一：反转一半数字</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ul><li><p>映入脑海的第一个想法便是将整个数字反转，再与原数字比较，如果他们相同则数字为回文数，但这可能会使反转后的数字大于int.max,产生整数溢出问题。</p></li><li><p>由此我们可以考虑反转整数的一半，回文数的后半部分反转后应该与前半部分相等。</p></li><li><p>首先处理临界问题</p></li><li><p>对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。</p></li><li><p>判断反转数字是否达到原始数字的一半：由于整个过程我们不断将原始数字除以 <code>10</code>，然后给反转后的数字乘上 <code>10</code>，所以，当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了。若出现入1321这样的情况，则非回文数，不影响结果。</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bool <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 特殊情况：</span></span><br><span class="line">        <span class="comment">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span></span><br><span class="line">        <span class="comment">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span></span><br><span class="line">        <span class="comment">// 则其第一位数字也应该是 0</span></span><br><span class="line">        <span class="comment">// 只有 0 满足这一属性</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> revertedNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class="line">        <span class="comment">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class="line">        <span class="comment">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><p>时间复杂度：O(log n)，对于每次迭代，我们会将输入除以 10，因此时间复杂度为O(logn)。<br>空间复杂度：O(1)。我们只需要常数空间存放若干变量。</p><h2 id="法二：数学解法"><a href="#法二：数学解法" class="headerlink" title="法二：数学解法"></a>法二：数学解法</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>通过取整和取余操作获取整数中对应的数字进行比较。</p><p>举个例子：1221 这个数字。</p><ul><li>通过计算 1221 / 1000， 得首位1</li><li>通过计算 1221 % 10， 可得末位 1</li><li>进行比较</li><li>再将 22 取出来继续比较</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> div = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">while</span> (x / div &gt;= <span class="number">10</span>) div *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> left = x / div;</span><br><span class="line">            <span class="keyword">int</span> right = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (left != right) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            x = (x % div) / <span class="number">10</span>;</span><br><span class="line">            div /= <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="法三-整数转字符串-看个乐"><a href="#法三-整数转字符串-看个乐" class="headerlink" title="法三:整数转字符串(看个乐)"></a>法三:整数转字符串(看个乐)</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        String reversedStr = (<span class="keyword">new</span> StringBuilder(x + <span class="string">""</span>)).reverse().toString();</span><br><span class="line">        <span class="keyword">return</span> (x + <span class="string">""</span>).equals(reversedStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Leetcode题解09-：回文数&quot;&gt;&lt;a href=&quot;#Leetcode题解09-：回文数&quot; class=&quot;headerlink&quot; title=&quot;Leetcode题解09 ：回文数&quot;&gt;&lt;/a&gt;Leetcode题解09 ：回文数&lt;/h2&gt;&lt;h2 id=&quot;题目：&quot;&gt;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Leetcode题解" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/Leetcode%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Leetcode题解" scheme="http://moersuo.github.io/tags/Leetcode%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 05替换空格</title>
    <link href="http://moersuo.github.io/2020/10/02/%E5%89%91%E6%8C%87offer-05%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>http://moersuo.github.io/2020/10/02/%E5%89%91%E6%8C%87offer-05%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</id>
    <published>2020-10-02T08:09:27.000Z</published>
    <updated>2020-10-04T06:42:23.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><blockquote><p>输入：s = “We are happy.”<br>输出：”We%20are%20happy.”</p></blockquote><h2 id="限制："><a href="#限制：" class="headerlink" title="限制："></a>限制：</h2><blockquote><p>0 &lt;= s 的长度 &lt;= 10000</p></blockquote><hr><h2 id="官方法一："><a href="#官方法一：" class="headerlink" title="官方法一："></a>官方法一：</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>由于每次替换从 1 个字符变成 3 个字符，使用字符数组可方便地进行替换。建立字符数组地长度为 s 的长度的 3 倍，这样可保证字符数组可以容纳所有替换后的字符。</p><p>1.创建字符数组，其长度为length * 3</p><p>2.初始化size为0，size表示替换后的字符串的长度</p><p>3.从左到右遍历字符串s</p><ul><li><p>利用charAt方法获得s的当前字符c</p></li><li><p>如果c为空格，则利用size的三次自增使得array[size] = “%”,array[size+1] = “2”,array[size+2] = “0”,且size增加3</p></li><li><p>如果c不是空格，则另array[size] = c，且size加1</p></li></ul><p>4.遍历结束后，size的值等于替换后字符串的长度，从array的前size个字符创建新字符串，并返回</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">char</span>[] array = <span class="keyword">new</span> <span class="keyword">char</span>[length * <span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">' '</span>) &#123;</span><br><span class="line">                array[size++] = <span class="string">'%'</span>;</span><br><span class="line">                array[size++] = <span class="string">'2'</span>;</span><br><span class="line">                array[size++] = <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                array[size++] = c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String newStr = <span class="keyword">new</span> String(array, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">return</span> newStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><ul><li>时间复杂度：O(n)。遍历字符串 <code>s</code> 一遍。</li><li>空间复杂度：O(n)。额外创建字符数组，长度为 <code>s</code> 的长度的 3 倍。</li></ul><h2 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>和上面差不多，就是把字符串中的每个字符一个个添加到StringBuilder中，如果遇到空格就把他换成%20。</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (s.charAt(i) == <span class="string">' '</span>)</span><br><span class="line">              stringBuilder.append(<span class="string">"%20"</span>);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              stringBuilder.append(s.charAt(i));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;请实现一个函数，把字符串 &lt;code&gt;s&lt;/code&gt; 中的每个空格替换成”%20”。&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>线程的五大状态</title>
    <link href="http://moersuo.github.io/2020/09/29/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BA%94%E5%A4%A7%E7%8A%B6%E6%80%81/"/>
    <id>http://moersuo.github.io/2020/09/29/%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BA%94%E5%A4%A7%E7%8A%B6%E6%80%81/</id>
    <published>2020-09-29T09:26:52.000Z</published>
    <updated>2020-10-04T06:41:53.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p><strong>线程的五大状态为：创建状态，就绪状态，阻塞状态，运行状态，死亡状态</strong></p><p><strong>new:</strong>  Thread t = new Thread() 线程一旦创建，就进入到了创建状态。</p><p><strong>就绪状态：</strong> 当调用start()方法，线程立即进入就绪状态，但不意味着立即调度执行。</p><p><strong>运行状态：</strong>进入运行状态，线程才真正执行线程体的代码块。</p><p><strong>阻塞状态：</strong> 当调用sleep，wait或同步锁定时，线程进入阻塞状态，就是代码不往下执行，阻塞事件解除后，重新进入就绪状态，等待cpu调度执行。</p><p><strong>dead：</strong>线程中断或结束，一旦进入死亡状态，就不能再次启动。</p><hr><h2 id="停止线程："><a href="#停止线程：" class="headerlink" title="停止线程："></a>停止线程：</h2><p>1.不推荐使用JDK提供的stop(),destory()方法</p><p>2.最好让线程自己停下来</p><p>3.建议使用一个标志位进行终止变量，当flag = false 时，终止线程运行。</p><h3 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.设置1个标识位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"run...Thread"</span>+i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.设置一个公开的方法停止线程，转换标识位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"lalala"</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">900</span>)&#123;</span><br><span class="line">                <span class="comment">//调用stop方法切换标识为，让线程停止</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">"线程该停止了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="线程休眠："><a href="#线程休眠：" class="headerlink" title="线程休眠："></a>线程休眠：</h2><ul><li>sleep(时间) 指定当前线程阻塞的毫秒数；</li><li>sleep存在异常interruptedException;</li><li>sleep时间达到后线程进入就绪状态</li><li>sleep可以模拟网络延时，倒计时等。</li><li>每个对象都有一个锁，sleep不会释放锁。</li></ul><h3 id="样例1：模拟抢票"><a href="#样例1：模拟抢票" class="headerlink" title="样例1：模拟抢票"></a>样例1：模拟抢票</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread.state;</span><br><span class="line"><span class="comment">// 模拟抢票</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticketNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"抢到了第"</span>+ticketNums--+<span class="string">"张票"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 模拟延时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestSleep ticket = <span class="keyword">new</span> TestSleep();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"小明"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"小王"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"小张"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样例2：模拟倒计时"><a href="#样例2：模拟倒计时" class="headerlink" title="样例2：模拟倒计时"></a>样例2：模拟倒计时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread.state;</span><br><span class="line"><span class="comment">//模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">turndown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span>(num &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            turndown();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程礼让："><a href="#线程礼让：" class="headerlink" title="线程礼让："></a>线程礼让：</h2><ul><li><p>礼让线程，让当前正在执行的线程暂停，但不阻塞。</p></li><li><p>将线程从运行状态转为就绪状态</p></li><li><p>让cpu重新调度，礼让不一定成功，看cpu心情。</p></li></ul><h3 id="样例：-1"><a href="#样例：-1" class="headerlink" title="样例："></a>样例：</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args )</span></span>&#123;</span><br><span class="line">        MyYield testYield= <span class="keyword">new</span> MyYield();</span><br><span class="line">        <span class="keyword">new</span> Thread(testYield,<span class="string">"1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testYield,<span class="string">"2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"开始运行"</span>);</span><br><span class="line">        Thread.yield();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"停止运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程强制执行："><a href="#线程强制执行：" class="headerlink" title="线程强制执行："></a>线程强制执行：</h2><ul><li><p>某一个线程对象可以一直独占资源，其他线程阻塞，一直到该线程的程序执行结束。</p></li><li><p>可以想象成插队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我是"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">200</span>)&#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"你是"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="观察线程状态："><a href="#观察线程状态：" class="headerlink" title="观察线程状态："></a>观察线程状态：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察线程状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"lalala"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察状态</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">// NEW</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察启动后</span></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">//RUN</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(state != Thread.State.TERMINATED)&#123;<span class="comment">//只要线程不停止，就一直输出状态</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState();<span class="comment">//更新线程状态</span></span><br><span class="line">            System.out.println(state);<span class="comment">//输出状态</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;线程的五大状态为：创建状态，就绪状态，阻塞状态，运行状态，死亡状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
      
    
    </summary>
    
    
      <category term="后端学习" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="多线程" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://moersuo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 04二维数组中的查找</title>
    <link href="http://moersuo.github.io/2020/09/29/%E5%89%91%E6%8C%87offer-04%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://moersuo.github.io/2020/09/29/%E5%89%91%E6%8C%87offer-04%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</id>
    <published>2020-09-29T08:26:50.000Z</published>
    <updated>2020-10-04T06:42:12.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><p><strong>现有矩阵matrix如下</strong></p><blockquote><p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p></blockquote><p>给定 target = <code>5</code>，返回 <code>true</code>。</p><p>给定 target = <code>20</code>，返回 <code>false</code>。</p><p><strong>限制：</strong></p><p>0 &lt;= n &lt;= 1000</p><p>0 &lt;= m &lt;= 1000</p><h2 id="官方法一：暴力"><a href="#官方法一：暴力" class="headerlink" title="官方法一：暴力"></a>官方法一：暴力</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>在不考虑二维数组已经排好序的情况下，直接遍历整个二维数组的每一个元素，判断目标值是否在二维数组中存在。</p><p><strong>注：</strong>二维数组的行列长度可用</p><p>int rows = matrix.length, columns = matrix[0].length; 表示</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length, columns = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><ul><li>时间复杂度：O(nm)。二维数组中的每个元素都被遍历，因此时间复杂度为二维数组的大小。</li><li>空间复杂度：O(n)。</li></ul><h2 id="官方法二：线性查找"><a href="#官方法二：线性查找" class="headerlink" title="官方法二：线性查找"></a>官方法二：线性查找</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>由于给的的数组为有序的，因此每当访问到一个元素时便可排除部分元素。</p><p>从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 <code>true</code>。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。</p><p>1.若数组为空，返回false</p><p>2.初始化行下标为0，列下标为二维数组的列数-1</p><p>3.重复以下步骤，直到行下标或列下标超出边界</p><p>获得当前下标位置的元素 num<br>如果 num 和 target 相等，返回 true<br>如果 num 大于 target，列下标减 1<br>如果 num 小于 target，行下标加 1</p><p>4.循环执行完毕后仍未找到元素等于目标值，则说明不存在这样的元素，返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length, columns = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>, column = columns - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (row &lt; rows &amp;&amp; column &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = matrix[row][column];</span><br><span class="line">            <span class="keyword">if</span> (num == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; target) &#123;</span><br><span class="line">                column--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                row++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析：-1"><a href="#复杂度分析：-1" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><p>时间复杂度：O(n+m)。访问到的下标的行最多增加 n 次，列最多减少 m 次，因此循环体最多执行 n + m 次。<br>空间复杂度：O(1)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 03数组中重复的数字</title>
    <link href="http://moersuo.github.io/2020/09/28/%E5%89%91%E6%8C%87offer-03%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://moersuo.github.io/2020/09/28/%E5%89%91%E6%8C%87offer-03%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-09-28T12:06:24.000Z</published>
    <updated>2020-10-04T06:40:22.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字</p></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3 </span><br></pre></td></tr></table></figure></blockquote><h2 id="限制："><a href="#限制：" class="headerlink" title="限制："></a>限制：</h2><blockquote><p>2 &lt;= n &lt;= 100000</p></blockquote><hr><h2 id="java：法一-使用集合set"><a href="#java：法一-使用集合set" class="headerlink" title="java：法一 使用集合set"></a>java：法一 使用集合set</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>由于只需要找出数组中任意一个重复的数字，因此遍历数组，遇到重复的数字即返回。为了判断一个数字是否重复遇到，使用集合存储已经遇到的数字，如果遇到的一个数字已经在集合中，则当前的数字是重复数字。</p><p>1.初始化集合为空集合，重复的数字 pepeat = -1</p><p>2.遍历数组中的每个元素，尝试将每个元素添加入集合中。若添加失败，则证明该元素已在集合中，将元素的值赋给repeat，结束循环。</p><p>3.返回repeat</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> repeat = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(num)) &#123;</span><br><span class="line">                repeat = num;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> repeat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><ul><li>时间复杂度：O(n)：遍历数组一遍。使用哈希集合（<code>HashSet</code>），添加元素的时间复杂度为 O(1)，故总的时间复杂度是 O(n)。</li><li>空间复杂度：O(n)。不重复的每个元素都可能存入集合，因此占用 O(n) 额外空间。</li></ul><h2 id="法二：使用临时数组"><a href="#法二：使用临时数组" class="headerlink" title="法二：使用临时数组"></a>法二：使用临时数组</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>我们可以申请一个临时数组temp，因为nums元素中的每个元素的大小都在0~n-1之间，所以我们可以把nums中元素的值和临时数组temp建立映射关系，就是nums中元素的值是几，我们就把temp中对应的位置值加1，当temp某个位置的值大于1的时候，就表示出现了重复，我们直接返回即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            temp[nums[i]]++;</span><br><span class="line">            <span class="keyword">if</span> (temp[nums[i]] &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="法三：原地置换"><a href="#法三：原地置换" class="headerlink" title="法三：原地置换"></a>法三：原地置换</h2><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>如果没有重复数字，那么正常排序后，数字i应该在下标为i的位置，所以思路是重头扫描数组，遇到下标为i的数字如果不是i的话，（假设为m),那么我们就拿与下标m的数字交换。在交换过程中，如果有重复的数字发生，那么终止返回ture</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i]!=i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]==nums[nums[i]])&#123;</span><br><span class="line">                    <span class="keyword">return</span> nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                temp=nums[i];</span><br><span class="line">                nums[i]=nums[temp];</span><br><span class="line">                nums[temp]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;找出数组中重复的数字。&lt;/p&gt;
&lt;p&gt;在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 22链表中倒数第k个节点</title>
    <link href="http://moersuo.github.io/2020/09/27/%E5%89%91%E6%8C%87offer-22%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>http://moersuo.github.io/2020/09/27/%E5%89%91%E6%8C%87offer-22%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</id>
    <published>2020-09-27T13:58:22.000Z</published>
    <updated>2020-10-04T06:42:31.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。</p></blockquote><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="java：双指针"><a href="#java：双指针" class="headerlink" title="java：双指针"></a>java：双指针</h2><p><strong>解题思路：</strong></p><p>利用双指针我们可以不考虑链表总长度，快指针先走k步，再让双指针同时前进，当快指针指向null时，慢指针剩下的部分即为所求值</p><p>1.初始化：建立快慢指针，均指向头结点</p><p>2.快指针向前走k步，慢指针不动</p><p>3.构建循环，双指针同时向前移动，当快指针为null跳出时，慢指针与尾结点距离为k-1，是倒数第k个节点。</p><p>4.返回慢指针</p><p>注意考虑边界问题</p><p>1）head为空指针</p><p>2）输入参数k为0</p><p>3）k大于链表长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sloution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getKthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界问题：head为空指针，输入的参数k为0</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || k == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode fast = head,slow = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; k ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="keyword">null</span> &amp;&amp; i &lt; k)&#123;</span><br><span class="line">                <span class="comment">// 边界问题：k大于链表长度</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第
      
    
    </summary>
    
    
      <category term="算法" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://moersuo.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://moersuo.github.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>三种方式实现多线程</title>
    <link href="http://moersuo.github.io/2020/09/27/%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://moersuo.github.io/2020/09/27/%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-09-27T06:19:28.000Z</published>
    <updated>2020-09-27T06:20:11.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java实现多线程的三种方式"><a href="#java实现多线程的三种方式" class="headerlink" title="java实现多线程的三种方式"></a>java实现多线程的三种方式</h2><p><strong>继承Thread类，实现Runnable接口，实现callable接口</strong></p><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="*继承Thread类"></a>*继承Thread类</h4><p><strong>子类继承Thead类具备多线程能力</strong></p><p><strong>启动线程：子类对象.start()</strong></p><p><strong>不建议使用：避免OOP单继承局限性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 使用继承thread方法创建多线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在执行分支任务"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1();</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在执行主线任务"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="*实现Runnable接口"></a>*实现Runnable接口</h4><p><strong>实现接口Runnable具有多线程能力</strong></p><p><strong>启动线程：传入目标对象+Thread对象.start()</strong></p><p><strong>推荐使用，避免单继承局限性，灵活方便，方便同一个对象被多个线程使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runnable1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 使用实现Runnable方法创建多线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在执行分支任务"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Runnable1 Runnable1 = <span class="keyword">new</span> Runnable1();</span><br><span class="line">        <span class="comment">//Thread thread = new Thread(Runnable1);</span></span><br><span class="line">        <span class="comment">//thread.start();</span></span><br><span class="line">        <span class="keyword">new</span> Thread(Runnable1).start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在执行主线任务"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="*实现Callable接口"></a>*实现Callable接口</h4><p><strong>1.实现callable接口需要返回值类型</strong></p><p><strong>2.重写call方法，需要抛出异常</strong></p><p><strong>3.创建目标对象</strong></p><p><strong>4.创建执行服务：ExecutorService ser  =Executors.newFixedThreadPool(1);</strong></p><p><strong>5.提交执行：Future<Boolean>result1=ser.submit(t1);</strong></p><p><strong>6.获取结果：bollean r1 = result1.get()</strong></p><p><strong>7.关闭服务：ser.shutdownNow();</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> course.multithread.callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 使用实现callable方法创建多线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在执行分支任务"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        CallableTest t1= <span class="keyword">new</span> CallableTest();</span><br><span class="line">       <span class="comment">//创建执行服务：</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//提交执行：</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        <span class="comment">//获取结果：</span></span><br><span class="line">        <span class="keyword">boolean</span> rs1 = r1.get();</span><br><span class="line">        System.out.println(rs1);</span><br><span class="line">        <span class="comment">//关闭服务：</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在执行主线任务"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java实现多线程的三种方式&quot;&gt;&lt;a href=&quot;#java实现多线程的三种方式&quot; class=&quot;headerlink&quot; title=&quot;java实现多线程的三种方式&quot;&gt;&lt;/a&gt;java实现多线程的三种方式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;继承Thread类，实现Ru
      
    
    </summary>
    
    
      <category term="后端学习" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="多线程" scheme="http://moersuo.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://moersuo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
